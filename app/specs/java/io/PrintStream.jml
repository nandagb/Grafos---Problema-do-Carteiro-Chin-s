// @(#)$Id: PrintStream.refines-java 2118 2006-10-20 21:28:15Z davidcok $

// Copyright (C) 2006 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

package java.io;
//@ model import java.util.Locale;

/** JML's specification of PrintStream
 * @author David Cok
 * @author Gary T. Leavens
 * @author Patrice Chalin
 */
//@ non_null_by_default
public class PrintStream extends FilterOutputStream implements Closeable, Appendable {

    //-RAC@ model public String outputText; in outputBytes, _value;
    //-RAC@ model public boolean endsInNewLine; in outputText;
    //-RAC@ ghost public static final String eol;
    //-RAC@ public static invariant \invariant_for(eol) && eol.length() > 0;

    //@ spec_public
    private boolean trouble; //-RAC@ in error;
    //-RAC@ public model boolean error;
    //-RAC@ represents error = trouble;
    
    //-RAC@ public invariant outputText != null && \invariant_for(outputText);
    
    //@ static_initializer

    /*-RAC@ public normal_behavior
    @   ensures outputText != null && outputText.isEmpty();
    @   ensures !endsInNewLine;
    @   ensures out.isOpen ==> isOpen;
    @   ensures underlyingStream == out;
    @*/
    //@ pure
    public PrintStream(OutputStream out);

    /*-RAC@ public normal_behavior
    @   ensures outputText.isEmpty();
    @   ensures outputText.equals("");
    @   ensures !endsInNewLine;
    @   ensures out.isOpen ==> isOpen;
    @   ensures underlyingStream == out;
    @*/
    //@ pure
    public PrintStream(OutputStream out, boolean autoFlush);

    /*-RAC@ public normal_behavior
    @   ensures outputText.isEmpty();
    @   ensures outputText.equals("");
    @   ensures !endsInNewLine;
    @   ensures out.isOpen ==> isOpen;
    @   ensures underlyingStream == out;
    @*/
    //@ pure
    public PrintStream(OutputStream out, boolean autoFlush, String enoding)
        throws java.io.UnsupportedEncodingException;


    /*-RAC@ public normal_behavior
    @   requires true;
    @   modifies outputText, endsInNewLine;
    @   ensures endsInNewLine && isOpen;
    @   ensures outputText.equals(\old(outputText) + eol);
    @*/
    public void println();

    /*-RAC@ protected normal_behavior
      @   modifies error;
      @   ensures error;
      @*/
    protected void setError();

    /*-RAC@ public normal_behavior
      @   requires !isOpen;
      @   modifies error;
      @   ensures error;
      @   ensures \result == error;
      @*/
    public boolean checkError();

    /*-RAC@ public normal_behavior
    @   requires true;
    @   modifies outputText, endsInNewLine;
    @   ensures outputText.equals(\old(outputText) + c) && isOpen;
    @*/
    //+RAC@ public normal_behavior assigns objectState; 
    public void print(char c);

    /*-RAC@ public normal_behavior
    @   requires true;
    @   modifies outputText, endsInNewLine;
    @   ensures endsInNewLine && isOpen;
    @   ensures outputText.equals(\old(outputText) + x + eol); 
    @*/
    //+RAC@ public normal_behavior assigns objectState; 
    public void println(char x); 

    /*-RAC@ public normal_behavior
    @   requires true;
    @   modifies outputText;
    @   ensures endsInNewLine & isOpen;
    @   ensures x != null ==> outputText == String.concat(String.concat(\old(outputText), x), eol);
    @*/
    //+RAC@ public normal_behavior assigns objectState; 
    public void println(/*@ nullable */String x);

    /*-RAC@ public normal_behavior
    @   requires true;
    @   modifies outputText;
    @   ensures isOpen;
    @   ensures s != null ==> outputText == String.concat(\old(outputText),s);
    @   ensures (s != null && \old(outputText).isEmpty()) ==> outputText == s;
    @*/
    //+RAC@ public normal_behavior assigns objectState; 
    public void print(/*@ nullable */String s);

    public void print(double Param0);

    public void println(double Param0);

    public void print(float Param0);

    public void println(float Param0);

    /*-RAC@ public normal_behavior
    @   requires true;
    @   modifies outputText, endsInNewLine;
    @   ensures endsInNewLine && isOpen;
    @   ensures (x!=null)==> outputText.equals(\old(outputText) + x.ptoString() + eol);
    @   ensures (x==null)==> outputText.equals(\old(outputText)+"null"+eol);
    @*/
    //+RAC@ public normal_behavior assigns objectState; 
    public void println(/*@ nullable */Object x);

    /*-RAC@ public normal_behavior
    @   requires true;
    @   modifies outputText, endsInNewLine;
    @   ensures isOpen;
    @   ensures (obj!=null)==> outputText.equals(\old(outputText) + obj.ptoString());
    @   ensures (obj==null)==> outputText.equals(\old(outputText)+"null");
    @*/
    //+RAC@ public normal_behavior assigns objectState; 
    public void print(/*@ nullable */Object obj);

    /*-RAC@ public normal_behavior
    @ requires true;
    @ assignable outputText, endsInNewLine;
    @ ensures endsInNewLine && isOpen;
    @ ensures outputText.startsWith(\old(outputText));
    @*/
    //+RAC@ public normal_behavior assigns objectState; 
    public void println(boolean b);
    
    /*-RAC@ public normal_behavior
    @ assignable outputText, endsInNewLine;
    @ ensures \result == this;
    @ ensures endsInNewLine && isOpen;
    @ ensures outputText.startsWith(\old(outputText));
    @*/
    //+RAC@ public normal_behavior assigns objectState; 
    public PrintStream printf(Locale locale, String format, Object ... args);

    /*-RAC@ public normal_behavior
    @ assignable outputText, endsInNewLine;
    @ ensures \result == this;
    @ ensures endsInNewLine && isOpen;
    @ ensures outputText.startsWith(\old(outputText));
    @*/
    //+RAC@ public normal_behavior assigns objectState; 
    public PrintStream printf(String format, Object ... args);

    /*-RAC@ public normal_behavior
    @ assignable outputText, endsInNewLine;
    @ ensures endsInNewLine && isOpen;
    @ ensures outputText.startsWith(\old(outputText));
    @*/
    //+RAC@ public normal_behavior assigns objectState; 
    public void print(boolean b);

    /*-RAC@ public normal_behavior
    @ assignable outputText, endsInNewLine;
    @ ensures endsInNewLine && isOpen;
    @ ensures outputText.startsWith(\old(outputText));
    @*/
    //+RAC@ public normal_behavior assigns objectState; 
    public void print(int i);

    /*-RAC@ public normal_behavior
    @ requires true;
    @ modifies outputText, endsInNewLine;
    @ ensures endsInNewLine && isOpen;
    @ ensures outputText.startsWith(\old(outputText));
    @*/
    //+RAC@ public normal_behavior assigns objectState; 
    public void println(int i);

    /*-RAC@ public normal_behavior
    @ assignable outputText, endsInNewLine;
    @ ensures endsInNewLine && isOpen;
    @ ensures outputText.startsWith(\old(outputText));
    @*/
    //+RAC@ public normal_behavior assigns objectState; 
    public void print(long i);

    /*-RAC@ public normal_behavior
    @ assignable outputText, endsInNewLine;
    @ ensures endsInNewLine && isOpen;
    @ ensures outputText.startsWith(\old(outputText));
    @*/
    //+RAC@ public normal_behavior assigns objectState; 
    public void println(long i);

    /*-RAC@ also
      @ public normal_behavior
      @   requires !isOpen;
      @   modifies error;
      @   ensures error;
      @ also
      @ public exceptional_behavior
      @   modifies output, error;
      @   signals (IOException) false;
      @*/
    //+RAC@ also assigns trouble, objectState; 
    public void flush();

    /*-RAC@
    @ assignable outputText, endsInNewLine;
    @ ensures endsInNewLine && isOpen;
    @ ensures outputText.startsWith(\old(outputText));
    @*/
    public void print(char[] ca);

    /*-RAC@
    @ assignable outputText, endsInNewLine;
    @ ensures endsInNewLine && isOpen;
    @ ensures outputText.startsWith(\old(outputText));
    @*/
    public void println(char[] ca);

    // inherits specs
    public void write(int b);

    // inherits specs
    public void write(byte[] b, int off, int len);

    /*-RAC@ also
      @ public normal_behavior
      @   requires !isOpen;
      @   modifies error;
      @   ensures error;
      @ also
      @ public exceptional_behavior
      @   modifies output, error;
      @   signals (IOException) false;
      @*/
    public void close();
}
