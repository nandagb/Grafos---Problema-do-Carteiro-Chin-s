// Copyright (C) 2002 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

/** This is based on earlier work by chalin, edited by cok.
 *  Java 1.5 differs from Java 1.4.2 only in the type of the field TYPE.  // 1.5 DIFFERENCE
 */
package java.lang;

/** JML's specification of java.lang.Boolean.
 * @version $Revision: 2022 $
 * @author Brandon Shilling
 * @author Gary T. Leavens
 * @author David R. Cok
 */
//+OPENJML@ immutable
//@ non_null_by_default
public final /*@ pure @*/ class Boolean implements java.io.Serializable, Comparable<Boolean> {


    public static final Boolean TRUE;

    public static final Boolean FALSE;

    public static final Class<Boolean>    TYPE = boolean.class;       // 1.5 DIFFERENCE

    //@ model public static final String TRUE_S = "true";
    //@ model public static final String FALSE_S = "false";
    
    //@ public normal_behavior
    //@   ensures TRUE != null && FALSE != null && TRUE != FALSE;
    //-RAC@   ensures TRUE.theBoolean;  // FIXME - why does theBoolean work, but not booleanValue()
    //-RAC@   ensures !FALSE.theBoolean;
    //@   ensures TYPE == boolean.class;
    //@ static_initializer
    //-RAC@ public static final invariant TRUE != null && FALSE != null && TRUE != FALSE && TRUE.theBoolean && !FALSE.theBoolean;

    //-RAC@ public model final boolean theBoolean; in objectState;
    //  FIXME: +RAC@ public represents theBoolean = booleanValue();

    /*@ public normal_behavior
      @   //-RAC@ ensures theBoolean == value;
      @*/
    //@ pure helper
    public Boolean(boolean value);

    /*@ public normal_behavior  ensures true; // FIXME -
      @ //  ensures \result <==> (TRUE_S.equalsIgnoreCase(s));
      @ model public static pure helper heap_free boolean decode( nullable String s);
      @
      @ public normal_behavior
      @   ensures \result == ( b ? TRUE_S : FALSE_S );
      @ model public static pure helper heap_free String canonicalString(boolean b);
      @*/

    //@ axiom decode(canonicalString(true)) == true;
    //@ axiom decode(canonicalString(false)) == false;
    //-RAC@ axiom TRUE.theBoolean;
    //-RAC@ axiom !FALSE.theBoolean;
    //@ axiom decode(TRUE_S);
    //@ axiom decode("True");
    //@ axiom decode("TRUE");
    //@ axiom !decode(FALSE_S);
    //@ axiom !decode("False");
    //@ axiom !decode("FALSE");
    //@ axiom !decode("");
    //@ axiom !decode(null);
    //@ axiom (\forall String s,ss; s.equals(ss); decode(s) == decode(ss));

    /*@ public normal_behavior
      @   //-RAC@ ensures theBoolean == decode(s);
      @*/
    public /*@ pure @*/ Boolean(/*@ nullable */ String s);
    
    /*@ public normal_behavior
      @   //-RAC@ ensures \result == theBoolean;
      @*/
    public /*@ pure helper heap_free @*/ boolean booleanValue();

    // NOTE: The result is not fresh
    /*@ public normal_behavior
      @   ensures \result != null && \result.booleanValue() == b;
      @   ensures \result == ( b ? TRUE : FALSE );
      @*/
    public static /*@ pure helper heap_free @*/ Boolean valueOf(boolean b);


    /*@ public normal_behavior
      @   ensures \result == ( decode(s) ? TRUE : FALSE );
      @*/
    public static /*@ pure helper heap_free @*/ Boolean valueOf(/*@ nullable */ String s);

    // NOTE: The results are interned (not fresh) Strings.  // FIXME - is this actually certain to be the case
    /*@ public normal_behavior
      @   ensures decode(\result) == b;
      @   ensures \result == (canonicalString(b));
      @   ensures String.isInterned(\result);
      @*/
    public static /*@ pure helper heap_free @*/ String toString(boolean b);

    /*@ also
      @ public normal_behavior
      @   //-RAC@ ensures decode(\result) == theBoolean;
      @   //-RAC@ensures \result == canonicalString(theBoolean);
      @*/
    //@ pure helper heap_free
    public String toString();
    
    //@ public normal_behavior
    //@   ensures \result == decode(s);
    public static boolean parseBoolean(String s);

    //+ESC@ public static final model int TRUE_HC;
    //+ESC@ public static final model int FALSE_HC;
    //+ESC@ public static final invariant TRUE_HC != FALSE_HC;

    // inherited specification
    //+ESC@ also public normal_behavior
    //+ESC@   ensures \result == ( theBoolean ? TRUE_HC : FALSE_HC);
    //@ pure
    public int hashCode();

    /*@ also
      @ public normal_behavior
      @   ensures \result <==> ( obj != null && (obj instanceof Boolean)
                         && booleanValue() == ((Boolean)obj).booleanValue());
      @*/
    public /*@ pure @*/ boolean equals(/*@ nullable */ Object obj);
    
    //@ also public normal_behavior
    //@   ensures (this.booleanValue() == b.booleanValue()) ==> \result == 0;
    //@   ensures (this.booleanValue() && !b.booleanValue()) ==> \result > 0;
    //@   ensures (!this.booleanValue() && b.booleanValue()) ==> \result < 0;
    public int compareTo(Boolean b); // null argument produces exception
    
    //@ public normal_behavior
    //@   ensures (b == bb) ==> \result == 0;
    //@   ensures (b && !bb) ==> \result > 0;
    //@   ensures (!b && bb) ==> \result < 0;
    public static int compare(boolean b, boolean bb);
    
    /*@ public normal_behavior
      @   ensures \result <==> (name != null && 
                                decode(System.getProperty(name)));
      @*/
    public static /*@ pure helper heap_free @*/ boolean getBoolean(/*@ nullable */ String name); 
}
