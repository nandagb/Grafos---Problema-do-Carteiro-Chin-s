// Copyright (C) 1998, 1999 Iowa State University
// Modifications (C) 2007 David Cok

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

package java.lang;

import java.lang.reflect.*;
import java.io.InputStream;
import java.lang.invoke.TypeDescriptor;
import java.lang.constant.Constable;
//+OPENJML@ immutable
//@ pure nullable_by_default
public final class Class<T> implements java.io.Serializable,
    Constable, TypeDescriptor.OfField<Class<?>>, AnnotatedElement, GenericDeclaration, Type {

    private Class(ClassLoader classLoader, Class<?> arrayComponentType);


    /*@ also public normal_behavior
      @   ensures \result != null && !\result.equals("")
      @        && (* \result is the name of this class object *);
      @*/
    //@ pure
    public String toString();
    
    //@ public normal_behavior
    //@    ensures true;
    //@ pure
    public String getSimpleName();

    // @ also public normal_behavior
    // @   ensures \result <==> (this == o);
    // @
    // @ pure heap_free 
    //public boolean equals(Object o);

    /*@   public normal_behavior
      @     requires className != null
      @         && (* a class named className has been or can be loaded
      @               by the defining loader of the current class *);
      @     ensures \result != null;
      @ also
      @   public behavior
      @     requires className != null;
      @     ensures true;
      @     signals_only ClassNotFoundException;
            // JML does not allow Errors in specs
      @     //signals (LinkageError) (* if linkage fails *);
      @     //signals (ExceptionInInitializerError)
      @     //          (* if the class must be loaded and its
      @     //             initialization throws an exception *);
      @     signals (ClassNotFoundException)
      @               (* if className can't be located *);
      @*/
    //@ pure
    public static /*@ non_null @*/
        Class<?> forName(/*@ non_null @*/ String className)
        throws ClassNotFoundException;

    /*@   public normal_behavior
      @     requires name != null && loader != null
      @         && (* a class named name has been/can be loaded by loader *);
      @     ensures \result != null;
      @ also
      @   public behavior
      @     requires name != null && loader != null;
      @     ensures true;
      @     signals_only ClassNotFoundException;
            // JML does not allow Errors in specs
      @     //signals (LinkageError) (* if linkage fails *);
      @     //signals (ExceptionInInitializerError)
      @     //          (* if the class must be loaded and its
      @     //             initialization throws an exception *);
      @     signals (ClassNotFoundException)
      @               (* if name can't be located *);
      @*/
    public static /*@ non_null @*/
        Class<?> forName(/*@ non_null @*/ String name,
                      boolean initialize,
                      /*@ non_null @*/ ClassLoader loader)
        throws ClassNotFoundException;

    public /*@ pure non_null @*/ T newInstance() 
        throws InstantiationException, IllegalAccessException;

    //@ public normal_behavior
    //@   ensures \result <==> (obj != null && (obj.getClass() <: this)); // FIXME - should \typeof(obj) <: (\TYPE)this work? The cast gives error.
    public /*@ pure @*/ boolean isInstance(/*@ nullable */Object obj);
    
    //@ public normal_behavior
    //@   requires obj == null || isInstance(obj);
    //@   ensures \result == obj;
    //@ also public exceptional_behavior
    //@   requires !(obj == null || isInstance(obj));
    //@   signals_only ClassCastException;
    public /*@ pure nullable @*/ T cast(/*@ nullable */Object obj);

    /*@ public normal_behavior ensures true; pure @*/
    public boolean isAssignableFrom(Class<?> cls);

    //@ public model boolean _isInterface; // cf. _isArray
    // @        represents _isInterface = isInterface();

    //@ ensures \result == _isInterface;
    public /*@ pure helper @*/ boolean isInterface();

    /** Needed to specify that invoking isArray() on an object always
      * produces the same result: no methods include this model field
      * in their assignable clause, so no methods can alter the
      * outcome of invoking isArray() on some object.  This property
      * is important when using ESC/Java on specs that use isArray(),
      * just knowing that isArray() is pure is not enough.
      *
      * Similar specs could be added to all other pure methods in this Class.
      */
    //@ public model boolean _isArray;
    // @        represents _isArray = isArray();

    /*
    //@ ensures \result == _isArray;
    //@ ensures \elemtype(\typeof(this)) <: \type(Object) ==> \result;
    //@ ensures \elemtype(\typeof(this)) == \type(int) ==> \result;
    //@ ensures \elemtype(\typeof(this)) == \type(byte) ==> \result;
    //@ ensures \elemtype(\typeof(this)) == \type(short) ==> \result;
    //@ ensures \elemtype(\typeof(this)) == \type(long) ==> \result;
    //@ ensures \elemtype(\typeof(this)) == \type(char) ==> \result;
    //@ ensures \elemtype(\typeof(this)) == \type(float) ==> \result;
    //@ ensures \elemtype(\typeof(this)) == \type(double) ==> \result;
    //@ ensures \elemtype(\typeof(this)) == \type(boolean) ==> \result;
    // FIXME - really need a better way to express this
     * */
    //@ also public normal_behavior
    //@   requires true;
    //@ pure helper
    public boolean isArray();

    /*@ also public normal_behavior
      @ ensures \result <==> (
                   this == int.class ||
                   this == short.class ||
                   this == long.class ||
                   this == float.class ||
                   this == double.class ||
                   this == char.class ||
                   this == boolean.class ||
                   this == byte.class ||
           this == void.class        // this case was missing --PC
                  );
      @*/
    public /*@ pure helper @*/ boolean isPrimitive();

    //@ public model String _getName;
    // @        represents _getName = getName();

    //@ ensures \result == _getName;
    public /*@ pure helper @*/ /*@ non_null @*/ String getName();

    public /*@ pure nullable @*/ ClassLoader getClassLoader();

    /*@ pure nullable @*/ ClassLoader getClassLoader0();

    public /*@ pure @*/ Class<? super T> getSuperclass();

    public /*@ pure @*/ Package getPackage();

    public /*@ pure @*/ Class<?>[] getInterfaces(); // CHANGED in 1.6

    public /*@ pure @*/ Class<?> getComponentType();

    public /*@ pure @*/ int getModifiers();

    public /*@ pure @*/ Object[] getSigners();
        
    void setSigners(Object[] signers);

    public /*@ pure @*/ Class<?> getDeclaringClass();

    public /*@ pure @*/ Class<?>[] getClasses(); // CHANGED in 1.6

    public /*@ pure @*/ Field[] getFields() throws SecurityException;

    public /*@ pure non_null @*/ Method[] getMethods() throws SecurityException;

    public /*@ pure non_null @*/ Constructor<?>[] getConstructors() throws SecurityException; // CHANGED in 1.6

    public /*@ pure @*/ Field getField(String name)
        throws NoSuchFieldException, SecurityException;

    public /*@ pure non_null @*/ Method getMethod(String name, Class<?>[] parameterTypes)
        throws NoSuchMethodException, SecurityException;

    public /*@ pure non_null @*/ Constructor<T> getConstructor(Class<?>[] parameterTypes)
        throws NoSuchMethodException, SecurityException;

    //@ ensures \result != null;
    //@ ensures \nonnullelements(\result);
    public /*@ pure @*/ Class<?>[] getDeclaredClasses() throws SecurityException; // CHANGED in 1.6

    //@ ensures \result != null;
    //@ ensures \nonnullelements(\result);
    public /*@ pure @*/ Field[] getDeclaredFields() throws SecurityException;

    //@ ensures \result != null;
    //@ ensures \nonnullelements(\result);
    public /*@ pure @*/ Method[] getDeclaredMethods() throws SecurityException;

    public /*@ pure @*/ Constructor<?>[] getDeclaredConstructors() throws SecurityException; // CHANGED in 1.6


    public /*@ pure non_null @*/ Field getDeclaredField(String name)
        throws NoSuchFieldException, SecurityException;

    public /*@ pure non_null @*/ Method getDeclaredMethod(String name, Class<?>[] parameterTypes)
        throws NoSuchMethodException, SecurityException;

    public /*@ pure non_null @*/ Constructor<T> getDeclaredConstructor(Class<?>[] parameterTypes)
        throws NoSuchMethodException, SecurityException;

    public /*@ pure @*/ InputStream getResourceAsStream(String name);

    public /*@ pure @*/ java.net.URL getResource(String name);

    public /*@ pure @*/ java.security.ProtectionDomain getProtectionDomain();

   // native void setProtectionDomain0(java.security.ProtectionDomain pd); // FIXME - does not match, but seems to be there?

    public /*@ pure @*/ boolean desiredAssertionStatus();

}
