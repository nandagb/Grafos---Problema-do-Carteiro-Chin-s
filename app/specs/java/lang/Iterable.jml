package java.lang;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;

//@ non_null_by_default
public interface Iterable<T> {

	//-RAC@ model public instance array<T> values; in objectState;
    //-RAC@ public invariant values.length >= 0;  // FIXME - should be implicit? (cf. gitbug686)

    /**
     * True iff we are allowed to contain null (not whether we do in fact
     * contain null).
     **/
    //-RAC@ model public instance boolean containsNull; in objectState; // FIXME - get rid of this

    //@ public normal_behavior
    //-RAC@   ensures \result <==> (\exists int i; 0 <= i < values.length; values[i] == o);
    //@ public model pure helper boolean containsObject(nullable Object o);
    
    /*-RAC@ public normal_behavior
      @   requires 0 <= n < values.length;
      @   ensures \result == values[(int)n];
      @   ensures containsObject(\result);
      @ model public pure T _get(\bigint n);
      @*/
    
    /*-RAC@ public normal_behavior
      @   requires 0 <= n < values.length;
      @   ensures \result == values[n];
      @   ensures containsObject(\result);
      @ model public pure T _get(int n);
      @*/
    

    public Iterator<T> iterator();
    
    /*@ public behavior
      @ {
      @   for (T t: this) action.accept(t);
      @ }
      @*/
    default void forEach(Consumer<? super T> action);
    
    default Spliterator<T> spliterator();

}
