// @(#)$Id: Short.jml 2022 2006-08-13 02:36:42Z chalin $

// Copyright (C) 2002 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass  Ave, Cambridge, MA 02139, USA.

package java.lang;

/** JML's specification of java.lang.Integer.
 * @version $Revision: 2022 $
 * @author Brandon Shilling
 * @author Gary T. Leavens
 */
//+OPENJML@ immutable
public /*@ pure @*/ final
    class Short extends Number implements Comparable<Short> {

    //@ public model final short theShort;
    //+RAC@ represents theShort = shortValue();

    /*@
      @
      @    public normal_behavior
      @      requires Character.MIN_RADIX <= r && r <= Character.MAX_RADIX;
      @      ensures \result <==>
      @         ( s != null && s.length()>0 &&
      @       (s.charAt(0) == '-' || Character.digit(s.charAt(0), r) != -1) &&
      @          (\forall int i; 1 <= i && i < s.length(); 
      @               Character.digit(s.charAt(i), r) != -1));
      @   model public static pure heap_free boolean parseable( String s, int r ){
        try { Short ss = Short.valueOf(s,r); return true; }
        catch (Exception e) { return false; }
          @   }

      @    public normal_behavior
      @     {|
      @       requires (nm.charAt(0) == 'O' && nm.charAt(1) == 'x');  // posititve hex
      @       ensures \result == parseable(nm.substring(2), 16);
      @      also
      @       requires (nm.charAt(0) == '-' && nm.charAt(1) == 'O' && nm.charAt(2) == 'x');  // negative hex
      @       ensures \result == parseable(nm.substring(3), 16);
      @      also
      @       requires (nm.charAt(0) == '#');              // positive hex
      @       ensures \result == parseable(nm.substring(1), 16);
      @      also
      @       requires (nm.charAt(0) == '-' && nm.charAt(1) == '#');  // negetive hex
      @       ensures \result == parseable(nm.substring(2), 16);
      @      also
      @       requires (nm.charAt(0) == 'O');              //positive octal
      @       ensures \result == parseable(nm.substring(1), 8);
      @      also
      @       requires (nm.charAt(0) == '-' && nm.charAt(1) == 'O');  // negetive octal
      @       ensures \result == parseable(nm.substring(2), 8);
      @      also
      @       ensures \result == parseable(nm, 10);  // positive or negetive short, radix 10
      @     |}
      @   model public static pure boolean decodeable( String nm ) {
        try { decode(nm); return true; }
        catch (Exception e) { return false; }
          }
      @ 
      @*/

    public static final short   MIN_VALUE; //  = -32768;
    public static final short   MAX_VALUE; // = 32767;
    //@ ghost public static final int MAX_UNSIGNED_VALUE = 65535; 

    public static final Class<Short>   TYPE;

    //@ ensures TYPE == short.class;
    //@ static_initializer

    public static final int   SIZE; // = 16; // Number of bits in a short
    public static final int   BYTES; // = 2; // Number of bytes in a short

    /*@
      @ public normal_behavior
      @   {|
      @    requires s < 0;
      @    ensures \result != null && \result.length() >= 2 && parseable(\result,10) &&  \result.charAt(0) == '-' && \result.charAt(1) != '0'
      @        && s == parseShort(\result);
      @   also
      @    requires s > 0;
      @    ensures \result != null && \result.length() >= 1 && parseable(\result,10) && \result.charAt(0) != '0'
      @        && s == parseShort(\result);
      @   also
      @    requires s == 0;
      @    ensures \result != null && \result.length() == 1 && parseable(\result,10) && \result.charAt(0) == '0';
      @   |}
          @ implies_that
          @   public normal_behavior
          @     ensures (* \result is a string representation of s *);
          @ for_example
          @   public normal_example
          @     requires s == (short) -34;
          @     ensures \result != null && \result.equals("-34");
      @*/
    public static /*@ pure @*/ /*@ non_null @*/ String toString(short s);

    /*@    public normal_behavior
      @      requires parseable(s,10);
      @      ensures \result == parseShort(s, 10);
      @ also
      @    public exceptional_behavior
      @      requires !parseable(s,10);
      @      signals (NumberFormatException);
      @*/
        public static /*@ pure @*/ short parseShort(String s)
            throws NumberFormatException ;

    /*@ public normal_behavior
      @   requires parseable(s, radix);
      @   ensures (* \result is the short represented by string s with specified radix *);
      @ also 
      @ public exceptional_behavior
      @   requires !parseable(s, radix);
      @   signals (NumberFormatException);
      @ for_example
      @   public normal_example
      @    requires s.equals("-34")  && radix == 10;
      @    ensures \result == -34;
      @*/
    public static /*@ pure @*/ short parseShort(String s, int radix)
            throws NumberFormatException ;

    /*@ public normal_behavior
      @   requires parseable(s, radix);
      @   ensures \fresh(\result) && \result.shortValue() == parseShort(s, radix);
      @ also 
      @ public exceptional_behavior
      @   requires !parseable(s, radix);
      @   signals (NumberFormatException);
      @*/
    public static /*@ pure @*/ /*@ non_null @*/
            Short valueOf(String s, int radix)
            throws NumberFormatException ;

    /*@ public normal_behavior
      @   requires parseable(s,10);
      @   ensures \fresh(\result) && \result.shortValue() == parseShort(s);
      @ also
      @ public exceptional_behavior
      @   requires !parseable(s,10);
      @   signals (NumberFormatException);
      @*/
    public static /*@ pure @*/ /*@ non_null @*/
            Short valueOf(String s) throws NumberFormatException ;

    /*@ public normal_behavior
      @   requires decodeable(nm);
      @   ensures (* \result is a Short representation of nm *);
      @ also
      @ public exceptional_behavior
      @   requires !decodeable(nm);
      @   signals(NumberFormatException);
      @*/
    public static /*@ pure @*/ /*@ non_null @*/
            Short decode(/*@ non_null @*/ String nm)
            throws NumberFormatException ;

    /*@ public normal_behavior
      @   ensures theShort == value;
      @*/
    public Short(short value) ;

    /*@ public normal_behavior
      @   requires parseable(s,10);
      @   ensures theShort == parseShort(s);
      @ also
      @ public exceptional_behavior
      @   requires !parseable(s,10);
      @   signals(NumberFormatException);
      @*/
    public Short(String s) throws NumberFormatException ;

    /*@ also
          @   public normal_behavior
      @     ensures \result == (byte) theShort;
      @*/
    //@ pure helper
    public byte byteValue() ;

    /*@ also
      @   public normal_behavior
      @     ensures \result == theShort;
      @*/
    //@ pure helper
    public short shortValue() ;

    /*@ also
      @   public normal_behavior
      @     ensures \result == (int) theShort;
      @*/
    //@ pure helper
    public int intValue() ;

    /*@ also
      @   public normal_behavior
      @     ensures \result == (long) theShort;
      @*/
    //@ pure helper
    public long longValue() ;

    /*@ also
      @   public normal_behavior
      @     ensures \result == (float) theShort;
      @*/
    //@ pure helper
    public float floatValue() ;

    /*@ also
      @   public normal_behavior
      @     ensures \result == (double) theShort;
      @*/
    //@ pure helper
    public double doubleValue() ;

        // specification inherited from Object
    public /*@ non_null @*/ String toString();

    /*@ also
      @   public normal_behavior
      @     ensures (* \result is a hash code for this object *);
      @*/
    public int hashCode() ;

    /*@ also
      @   public normal_behavior
      @     requires obj != null && (obj instanceof Short);
      @     ensures \result == (theShort == ((Short) obj).shortValue());
      @   also
      @   public normal_behavior
      @     requires obj == null || !(obj instanceof Short);
      @     ensures !\result;
      @*/
    public boolean equals(Object obj) ;

    /*@ also public normal_behavior
      @ {|
      @   requires theShort == anotherShort.shortValue();
      @   ensures \result == 0;
      @ also 
      @   requires theShort < anotherShort.shortValue();
      @   ensures \result < 0;
      @ also
      @   requires theShort > anotherShort.shortValue();
      @   ensures \result > 0;
      @ |}
      @*/
    public int compareTo(/*@ non_null @*/ Short anotherShort) ;

    /*@ 
      @     public normal_behavior
      @       requires o != null && (o instanceof Short);
      @       ensures \result == compareTo((Short) o);
      @   also
      @     public exceptional_behavior
      @       requires o == null && !(o instanceof Short);
      @       signals(ClassCastException);
      @*/
    public int compareTo(Object o) throws ClassCastException;

    //@ public normal_behavior
    //@   ensures \result == (b0*256 + Byte.toUnsignedInt(b1));
    //@ model public static pure helper heap_free short asShort(byte b0, byte b1);
    
    //@ public normal_behavior
    //@   ensures \result == (i < 0 ? 0x10000 + i : i);
    //@ pure helper heap_free
    public static int toUnsignedInt(short i);

    //@ public normal_behavior
    //@   ensures \result == (i < 0 ? 0x10000 + i : i);
    //@ pure helper
    //@ model public static int toUnsignedIntNF(short i);

    //@ public normal_behavior
    //@   ensures \result == (i < 0 ? 0x10000 + i : i);
    //@ pure helper heap_free
    public static long toUnsignedLong(short i);

    /*@
    ensures 0 <= toUnsignedInt(i);
    ensures toUnsignedInt(i) <= 65535;
    model public static void lemma1(short i) {}
    */

    /*@
    ensures (i & 0xffff) == toUnsignedInt(i);
    model public static void lemma2(short i) {}
    */

}
