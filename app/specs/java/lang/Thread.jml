package java.lang;

//@ non_null_by_default
public class Thread implements Runnable {
    //@ public model boolean dead;
//  private volatile String name;
//  private int priority;
//  private Thread threadQ;
//  private long eetop;
//  private boolean single_step;
//  private boolean daemon;
//  private boolean stillborn;
//  private Runnable target;
//  private ThreadGroup group;
//  private ClassLoader contextClassLoader;
//  private java.security.AccessControlContext inheritedAccessControlContext;
//  private static int threadInitNumber;
//  ThreadLocal.ThreadLocalMap threadLocals;
//  ThreadLocal.ThreadLocalMap inheritableThreadLocals;
//  private long stackSize;
//  private long nativeParkEventPointer;
//  private long tid;
//  private static long threadSeqNumber;
//  private volatile int threadStatus;
//  volatile Object parkBlocker;
//  private volatile sun.nio.ch.Interruptible blocker;
//  private final Object blockerLock;
  public static final int MIN_PRIORITY;
  public static final int NORM_PRIORITY;
  public static final int MAX_PRIORITY;
//  private static final StackTraceElement[] EMPTY_STACK_TRACE;
//  private static final RuntimePermission SUBCLASS_IMPLEMENTATION_PERMISSION;
//  private volatile Thread.UncaughtExceptionHandler uncaughtExceptionHandler;
//  private static volatile Thread.UncaughtExceptionHandler defaultUncaughtExceptionHandler;
//  long threadLocalRandomSeed;
//  int threadLocalRandomProbe;
//  int threadLocalRandomSecondarySeed;
//  private static native void registerNatives();
//  private static synchronized int nextThreadNum();
//  private static synchronized long nextThreadID();
//  void blockedOn(sun.nio.ch.Interruptible );
  
  //@ public normal_behavior
  //@   ensures \result != null;
  //@ pure
  public static native Thread currentThread();
  //@ public normal_behavior
  //@   ensures true;
  //@ pure
  public static native void yield();
  //@ public behavior
  //@   ensures true;
  //@ pure
  public static native void sleep(long t) throws InterruptedException;
  //@ public behavior
  //@   ensures true;
  //@ pure
  public static void sleep(long t, int tt) throws InterruptedException;

  
  //  private void init(ThreadGroup, Runnable, String, long);
//  private void init(ThreadGroup, Runnable, String, long, java.security.AccessControlContext);
  protected Object clone() throws CloneNotSupportedException;
  public Thread();
  public Thread(Runnable r);
//  Thread(Runnable, java.security.AccessControlContext);
  public Thread(ThreadGroup g, Runnable r);
  
  //@ public normal_behavior
  //@   requires true;
  //@ pure
  public Thread(String s);
  //@ public normal_behavior
  //@   requires true;
  //@ pure
  public Thread(ThreadGroup g, String s);
  //@ public normal_behavior
  //@   requires true;
  //@ pure
  public Thread(Runnable r, String s);
  //@ public normal_behavior
  //@   requires true;
  //@ pure
  public Thread(ThreadGroup g, Runnable r, String s);
  //@ public normal_behavior
  //@   requires true;
  //@ pure
  public Thread(ThreadGroup g, Runnable r, String s, long t);
  
  //@ public normal_behavior
  //@   assignable this.*;  // FIXME - be more specific?
  //@   ensures true;
  public synchronized void start();
  
  
//  private native void start0();
  
  //@ also public behavior
  //@   requires true;
  public void run();
//  private void exit();
  
  @Deprecated(since="1.2")
  public final void stop();

  //@ public normal_behavior
  //@   ensures true;
  //@ pure
  public void interrupt();

  //@ public normal_behavior
  //@   ensures true;
  //@ pure
  public static boolean interrupted();

  //@ public normal_behavior
  //@   ensures true;
  //@ pure
  public boolean isInterrupted();

  //@ public normal_behavior
  //@   requires true;
  //@   ensures \result == !dead;
  //@ pure
  public final native boolean isAlive();
  public final void suspend();
  public final void resume();
  public final void setPriority(int p);
  public final int getPriority();
  public final synchronized void setName(String name);
  public final String getName();
  public final ThreadGroup getThreadGroup();
  public static int activeCount();
  public static int enumerate(Thread[] tt);
  public native int countStackFrames();
  public final synchronized void join(long t) throws InterruptedException;
  public final synchronized void join(long t, int tt) throws InterruptedException;
  
  //@ public behavior
  //@   assignable dead;
  //@   ensures !isAlive();
  //@   signals (InterruptedException e) \not_modified(dead);
  //@   signals_only InterruptedException;
  public final void join() throws InterruptedException;
  
  public static void dumpStack();
  
  //@ model public boolean _isDaemon;
  
  //@ public normal_behavior
  //@   assignable _isDaemon;
  //@   ensures _isDaemon == on;
  public final void setDaemon(boolean on);
  //@ public normal_behavior
  //@   ensures _isDaemon == \result;
  //@ pure
  public final boolean isDaemon();
  
  public final void checkAccess();
  
  //@ also public normal_behavior
  //@   ensures true;
  //@ pure
  public String toString();
  public ClassLoader getContextClassLoader();
  public void setContextClassLoader(ClassLoader loader);
  public static native boolean holdsLock(Object lock);
  public StackTraceElement[] getStackTrace();
  public static java.util.Map<Thread, StackTraceElement[]> getAllStackTraces();
//  private static boolean isCCLOverridden(Class<?>);
//  private static boolean auditSubclass(Class<?>);
//  private static native StackTraceElement[][] dumpThreads(Thread[]);
//  private static native Thread[] getThreads();
  public long getId();
  public Thread.State getState();
  public static void setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler handler);
  public static Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler();
  public Thread.UncaughtExceptionHandler getUncaughtExceptionHandler();
  public void setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler handler);
//  private void dispatchUncaughtException(Throwable);
//  static void processQueue(ref.ReferenceQueue<Class<?>>, java.util.concurrent.ConcurrentMap<? extends ref.WeakReference<Class<?>>, ?>);
//  private native void setPriority0(int);
//  private native void stop0(Object);
//  private native void suspend0();
//  private native void resume0();
//  private native void interrupt0();
//  private native void setNativeName(String);
//  static {};
}
