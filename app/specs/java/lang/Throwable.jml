// @(#)$Id: Throwable.jml,v 1.13 2007/12/30 05:24:15 chalin Exp $

// Copyright (C) 2005 Iowa State University
//
// This file is part of the runtime library of the Java Modeling Language.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1,
// of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with JML; see the file LesserGPL.txt.  If not, write to the Free
// Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
// 02110-1301  USA.

/* Note that the Java API specifications are ambiguous when it comes to the
 * nullity of the <code>message</code> argument of the constructors. We
 * require the message to be non_null; this allows us to maximize the error
 * reporting capabilities of, e.g., EscJava2. If the intent was to provide a
 * null message, then the appropriate constructor (i.e. the one not taking a
 * message argument) should be used instead.
 * 
 * @author Patrice Chalin <chalin@dsrg.org>
 * @author David Cok <cok@frontiernet.net>
 * @author Joe Kiniry <kiniry@cs.kun.nl>
 *
 * @todo kiniry - Replace use of java.lang.String with JMLString?
 *
 */

package java.lang;
// @ model import java.util.Arrays;
import java.io.PrintStream;
import java.io.PrintWriter;
//@ non_null_by_default
public class Throwable extends Object implements java.io.Serializable
{
    
    //@ public normal_behavior
    //@   ensures true; // This is here to suppress warnings about private static final fields
    //@ static_initializer
    
    //@ public model nullable String _message;  in objectState;
    //@ public model nullable Throwable _cause; in objectState;
    //@ public model boolean _causeSet;         in _cause;

    //@ public model non_null StackTraceElement[] _stackTrace; in objectState;

    //@ spec_public
    private java.util.List<Throwable> suppressedExceptions;
    
    //  FIXME @ public invariant \nonnullelements(_stackTrace);

    /*@ public normal_behavior
      @   ensures \result == (_message == null & _cause == null & _causeSet == false
      @                        & \nonnullelements(_stackTrace)
      @                        & suppressedExceptions.size() == 0);
      @ public pure helper model boolean standardThrowable();

      @ public normal_behavior
      @   ensures \result == (_cause == null & _causeSet == false
      @                      & \nonnullelements(_stackTrace)
      @                      & suppressedExceptions.size() == 0);
        public pure model boolean standardThrowableUnspecifiedMessage();

      @ public normal_behavior
      @   requires c != this;
      @   ensures \result == (_cause == c & _causeSet == true
      @                       & \nonnullelements(_stackTrace)
      @                       & suppressedExceptions.size() == 0);
        public pure model boolean standardThrowableUnspecifiedMessage(nullable Throwable c);

      @ public normal_behavior
      @   ensures \result == (_message == s & _cause == null & _causeSet == false
      @                       & \nonnullelements(_stackTrace)
      @                       & suppressedExceptions.size() == 0);
        public pure helper model boolean standardThrowable(nullable String s);

      @ public normal_behavior
      @   requires c != this;
      @   ensures \result == (initMessage(c) & _cause == c & _causeSet == true
      @                       & \nonnullelements(_stackTrace)
      @                       & suppressedExceptions.size() == 0);
        public pure helper model boolean standardThrowable(nullable Throwable c);

      @ public normal_behavior
      @   requires c != this;
      @   ensures \result == (_message == s & _cause == c & _causeSet == true
      @                       & \nonnullelements(_stackTrace)
      @                       & suppressedExceptions.size() == 0);
        public pure helper model boolean standardThrowable(nullable String s, nullable Throwable c);

      @ public normal_behavior
      @   requires c != this;
      @   ensures \result == (_message == s & _cause == c & _causeSet == true
      @                       & \nonnullelements(_stackTrace)
      @                       & suppressedExceptions.size() == 0);
      // TODO - say more about boolean arguments
        public pure helper model boolean standardThrowable(nullable String s, nullable Throwable c, boolean enableSuppression, boolean writableStackTrace);

      @ public normal_behavior
      @   ensures \result <==> (c == null ? _message == null : (_message != null 
      @                                   //-RAC@ && _message == c.theString
      @                                   ));
      @
        public pure helper model boolean initMessage(nullable Throwable c);
      @*/

    //@ public normal_behavior
	//-RAC@   ensures standardThrowable();
    public /*@ pure*/ Throwable();

    //@ public normal_behavior
    //-RAC@   ensures standardThrowable(message);
    public /*@ pure*/ Throwable(/*@ nullable */String message);

    //@ public normal_behavior
    //-RAC@   ensures standardThrowable(message, cause);
    //@ pure
    public Throwable(/*@ nullable*/String message, /*@ nullable*/Throwable cause);

    //@ public normal_behavior
    //-RAC@   ensures initMessage(cause);
    //-RAC@   ensures _cause == cause;
    //-RAC@   ensures _causeSet;
    //-RAC@   ensures standardThrowable(cause);
    //@ pure
    public Throwable(/*@ nullable*/Throwable cause);
    
    //@ protected normal_behavior
    //-RAC@   ensures _message == message;
    //-RAC@   ensures _cause == cause;
    //-RAC@   ensures _causeSet;
    //-RAC@   ensures standardThrowable(message, cause, enableSuppression, writableStackTrace);
    //@// TODO - say more about the boolean arguments
    //@ pure
    protected Throwable(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace);
    

    //@ public normal_behavior
    //@    reads _message;
    //-RAC@   ensures \result == _message;
    public /*@ pure helper nullable*/ String getMessage();

    //@ public normal_behavior
    //@    reads _message;
    //-RAC@   ensures  \result == _message;
    public /*@ pure helper nullable*/ String getLocalizedMessage();

    //@ public normal_behavior
    //@    reads _cause;
    //-RAC@  ensures \result == _cause;
    synchronized public /*@ pure helper nullable*/ Throwable getCause();

    /*-RAC@ public normal_behavior
      @   requires !_causeSet;
      @   requires cause != this;
      @   assignable _cause;
      @   ensures _causeSet;
      @   ensures _cause == cause;
      @   ensures \result == this;
      @ also
      @ public exceptional_behavior
      @   requires _causeSet | cause == this;
      @   assignable \nothing;
      @   signals_only IllegalStateException, IllegalArgumentException;
      @   signals (IllegalStateException e) _causeSet & !e._causeSet;
      @   signals (IllegalArgumentException e) cause == this & !e._causeSet;
      @*/
    public synchronized /*@ non_null*/ Throwable initCause(/*@ nullable*/Throwable cause);

    /*-RAC@ also public normal_behavior
      @   requires \typeof(this) == \type(Throwable);
      @   reads _message, _message.*;
      @   ensures _message == null ==> \result.equals(this.getClass().toString());
      @   ensures _message != null ==> \result.equals(this.getClass().toString() + ": " + _message);
      @ 
      @*/
    public /*@ pure non_null @*/ String toString();

    // FIXME - need to indicate that the output streams are modified and not
    // other stuff
    // Prints to System.err
    //@ public normal_behavior
    //@   assignable System.err.*;
    public void printStackTrace();

    //-RAC@ public normal_behavior
    //-RAC@   requires s.isOpen;
    //-RAC@   assignable s.outputText;
    //-RAC@   ensures s.isOpen;
    public void printStackTrace(/*@ non_null*/PrintStream s);

    //-RAC@ public normal_behavior
    //-RAC@   //requires s.isOpen;  // FIXME
    //-RAC@   assignable s.outputText;
    //-RAC@   //ensures s.isOpen;
    public void printStackTrace(/*@ non_null*/PrintWriter s);

    //@ public normal_behavior
    //-RAC@   assignable _stackTrace;
    //@   ensures \result == this;
    public synchronized /*@ non_null*/ Throwable fillInStackTrace();

    //@ public normal_behavior  // FIXME - this crashes Simplify
    //@   reads _stackTrace, _stackTrace[*];
    //@   ensures \result != null;
    //-RAC@   ensures \result == _stackTrace;
    //@   //ensures (\forall int i; 0 <= i && i < _stackTrace.length;
    //@   //                        _stackTrace[i].equals(\result[i]));
    public /*@ pure helper non_null*/ StackTraceElement /*@ non_null */ [] getStackTrace();

    //@ public normal_behavior
    //@   requires \nonnullelements(stackTrace);
    //-RAC@   assignable _stackTrace;
    //-RAC@   ensures _stackTrace.equals(stackTrace);
    //@ also
    //@ public exceptional_behavior
    //@   requires !\nonnullelements(stackTrace);
    //@   assignable \nothing;
    //@   signals_only NullPointerException;
    public void setStackTrace(/*@ non_null*/ StackTraceElement /*@ non_null */ [] stackTrace);

    //@ public normal_behavior
    //@  requires t != null & t != this;
    //@  assignable \everything; // _throwables;  // FIXME
    // @  ensures suppressedExceptions.length == \old(suppressedExceptions.length+1);
    //@ also public exceptional_behavior
    //@  requires t == null | t == this;
    //@  assignable \nothing;
    //@  signals_only NullPointerException, IllegalArgumentException;
    //@  signals (NullPointerException e) t == null;
    //@  signals (IllegalArgumentException e) t == this;
    //@  
    public final synchronized void addSuppressed(/*@ nullable */ Throwable t);
    
    //@ public normal_behavior
    //@    requires true;
    //@    reads suppressedExceptions;
    //-RAC @   ensures \result == suppressedExceptions; // FIXME - is the result the same array on every call?
    //@ pure helper
    public final synchronized Throwable[] getSuppressed();

}
