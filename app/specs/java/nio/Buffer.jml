package java.nio;

public abstract class Buffer {
    static final int SPLITERATOR_CHARACTERISTICS;

    //@ spec_public
    private int mark;

    //@ spec_public
    private int position;

    //@ spec_public
    private int limit;

    //@ spec_public
    private final int capacity;

    //@ model public boolean _isReadOnly;
    //@ model public boolean _hasBackingArray;
    //@ model public int _offset;

    //@ public invariant 0 <= mark;
    //@ public invariant mark <= position;
    //@ public invariant position <= limit;
    //@ public invariant limit <= capacity;

    long address;
    //Buffer(int mark, int pos, int lim, int cap, MemorySegmentProxy segment);

    //@ public normal_behavior
    //@   ensures \result == capacity;
    //@ pure helper
    public final int capacity();

    //@ public normal_behavior
    //@   ensures \result == position;
    //@ pure helper
    public final int position();

    //@ public normal_behavior
    //@   requires 0 <= i && i <= limit;
    //@   assignable position;
    //@   ensures position == i;
    public final Buffer position(int i);

    //@ public normal_behavior
    //@   ensures \result == limit;
    //@ pure helper
    public final int limit();

    //@ public normal_behavior
    //@   requires this.position <= i && i <= this.capacity;
    //@   assignable this.limit;
    //@   ensures this.limit == i;
    public final Buffer limit(int i);

    //@ public normal_behavior
    //@   assignable this.mark;
    //@   ensures this.mark == this.position;
    public final Buffer mark();

    //@ public normal_behavior
    //@   assignable this.position;
    //@   ensures this.position == this.mark;
    public final Buffer reset();

    //@ public normal_behavior
    //@   assignable this.position, this.mark, this.limit;
    //@   ensures this.mark == 0;
    //@   ensures this.position == 0;
    //@   ensures this.limit == this.capacity;
    public final Buffer clear();

    //@ public normal_behavior
    //@   assignable this.position, this.limit, this.mark;
    //@   ensures this.limit == \old(this.position);
    //@   ensures this.position == 0;
    //@   ensures \result == this;
    public final Buffer flip();

    //@ public normal_behavior
    //@   assignable this.mark, this.position;
    //@   ensures this.mark == 0;
    //@   ensures this.position == 0;
    public final Buffer rewind();

    //@ public normal_behavior
    //@   ensures \result == (limit - position);
    //@ pure
    public final int remaining();

    //@ public normal_behavior
    //@   ensures \result == (position < limit);
    //@ pure
    public final boolean hasRemaining();

    //@ public normal_behavior
    //@   ensures \result == _isReadOnly;
    //@ pure helper
    public abstract boolean isReadOnly();

    //@ public normal_behavior
    //@   ensures \result == (_hasBackingArray && !_isReadOnly);
    //@ pure helper
    public abstract boolean hasArray();

    //@ public normal_behavior
    //@   requires hasArray();
    //@ also
    //@ public exceptional_behavior
    //@   requires !hasArray();
    //@   assignable \nothing;
    //@   signals (ReadOnlyBufferException) _isReadOnly && _hasBackingArray;
    //@   signals (UnsupportedOperationException) !_hasBackingArray;
    public abstract java.lang.Object array();

    //@ public normal_behavior
    //@   requires hasArray();
    //@   assignable \nothing;
    //@   ensures \result == _offset;
    //@ also
    //@ public exceptional_behavior
    //@   requires !hasArray();
    //@   assignable \nothing;
    //@   signals (ReadOnlyBufferException) _isReadOnly && _hasBackingArray;
    //@   signals (UnsupportedOperationException) !_hasBackingArray;
    //@ pure helper
    public abstract int arrayOffset();
    
    public abstract boolean isDirect();
    final int nextGetIndex();
    final int nextGetIndex(int i);
    final int nextPutIndex();
    final int nextPutIndex(int i);
    final int checkIndex(int i);
    final int checkIndex(int i, int j);
    final int markValue();
    final void discardMark();
}
