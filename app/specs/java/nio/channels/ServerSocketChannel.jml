package java.nio.channels;
import java.net.*;
//@ non_null_by_default
public abstract class ServerSocketChannel extends java.nio.channels.spi.AbstractSelectableChannel implements NetworkChannel {
    
    
    protected ServerSocketChannel(java.nio.channels.spi.SelectorProvider provider);
    
    //@ public behavior
    //@   ensures \fresh(\result);
    //@   signals_only java.io.IOException;
    //@ pure
    public static ServerSocketChannel open() throws java.io.IOException;

    public final int validOps();

    //@ also public normal_behavior
    //@   requires addr != null;
    //@   assignable this.state;
    //@   ensures \result == this;
    //@ also public exceptional_behavior
    //@   requires addr == null;
    //@   assignable \nothing;
    public final ServerSocketChannel bind(/*@ nullable */SocketAddress addr) throws java.io.IOException;
    
    //@ public normal_behavior
    //@   requires addr != null;
    //@   assignable this.state;
    //@   ensures \result == this;
    //@ also public exceptional_behavior
    //@   requires addr == null;
    //@   assignable \nothing;
    public abstract ServerSocketChannel bind(/*@ nullable */SocketAddress addr, int n) throws java.io.IOException;

    //public abstract <T> ServerSocketChannel setOption(java.net.SocketOption<T> opt, T t) throws java.io.IOException;
    
    //-RAC@ model public java.net.ServerSocket _socket;
    //@ public normal_behavior
    //-RAC@   ensures \result == _socket;
    //+RAC@   ensures true;
    //@ pure
    public abstract java.net.ServerSocket socket();
    public abstract SocketChannel accept() throws java.io.IOException;
    public abstract java.net.SocketAddress getLocalAddress() throws java.io.IOException;
    //public NetworkChannel setOption(java.net.SocketOption opt, java.lang.Object obj) throws java.io.IOException;


}
