package java.time;

//@ immutable non_null_by_default
public final class Instant implements java.time.temporal.Temporal, java.time.temporal.TemporalAdjuster, Comparable<Instant>, java.io.Serializable {
 /*
  public static final java.time.Instant EPOCH;
  private static final long MIN_SECOND;
  private static final long MAX_SECOND;
  public static final java.time.Instant MIN;
  public static final java.time.Instant MAX;
  private static final long serialVersionUID;
  */
  //@ spec_public
  private final long seconds;
  //@ spec_public
  private final int nanos;
  /*
  public static java.time.Instant now();
  public static java.time.Instant now(java.time.Clock);
  public static java.time.Instant ofEpochSecond(long);
  public static java.time.Instant ofEpochSecond(long, long);
  public static java.time.Instant ofEpochMilli(long);
  public static java.time.Instant from(java.time.temporal.TemporalAccessor);
  public static java.time.Instant parse(java.lang.CharSequence);
  private static java.time.Instant create(long, int);
  private java.time.Instant(long, int);
  public boolean isSupported(java.time.temporal.TemporalField);
  public boolean isSupported(java.time.temporal.TemporalUnit);
  public java.time.temporal.ValueRange range(java.time.temporal.TemporalField);
  public int get(java.time.temporal.TemporalField);
  public long getLong(java.time.temporal.TemporalField);
  public long getEpochSecond();
  public int getNano();
  public java.time.Instant with(java.time.temporal.TemporalAdjuster);
  public java.time.Instant with(java.time.temporal.TemporalField, long);
  public java.time.Instant truncatedTo(java.time.temporal.TemporalUnit);
  public java.time.Instant plus(java.time.temporal.TemporalAmount);
  public java.time.Instant plus(long, java.time.temporal.TemporalUnit);
  public java.time.Instant plusSeconds(long);
  public java.time.Instant plusMillis(long);
  public java.time.Instant plusNanos(long);
  private java.time.Instant plus(long, long);
  public java.time.Instant minus(java.time.temporal.TemporalAmount);
  public java.time.Instant minus(long, java.time.temporal.TemporalUnit);
  public java.time.Instant minusSeconds(long);
  public java.time.Instant minusMillis(long);
  public java.time.Instant minusNanos(long);
  public <R> R query(java.time.temporal.TemporalQuery<R>);
  public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal);
  public long until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit);
  private long nanosUntil(java.time.Instant);
  private long secondsUntil(java.time.Instant);
  public java.time.OffsetDateTime atOffset(java.time.ZoneOffset);
  public java.time.ZonedDateTime atZone(java.time.ZoneId);
  */
  //@ public normal_behavior
  //@   ensures \result == (Long.MIN_VALUE <= 1000*seconds <= (Long.MAX_VALUE-1000));
  //@ pure
  //@ model public static boolean okEpochMilliForLong(\bigint seconds, \bigint nanos);
 
  //@ public normal_behavior
  //@   ensures \result == okEpochMilliForLong(instant.seconds, instant.nanos);
  //@ model public static boolean okEpochMilliForLong(Instant instant);
  
  //@ public normal_behavior
  //@   requires okEpochMilliForLong(seconds,nanos);
  //@   ensures \result == (nanos/1000000) + 1000*seconds; // TODO: Not sure this matches the implementation
  public long toEpochMilli();
  /*
  public int compareTo(java.time.Instant);
  public boolean isAfter(java.time.Instant);
  public boolean isBefore(java.time.Instant);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  private java.lang.Object writeReplace();
  private void readObject(java.io.ObjectInputStream) throws java.io.InvalidObjectException;
  void writeExternal(java.io.DataOutput) throws java.io.IOException;
  static java.time.Instant readExternal(java.io.DataInput) throws java.io.IOException;
  public java.time.temporal.Temporal minus(long, java.time.temporal.TemporalUnit);
  public java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount);
  public java.time.temporal.Temporal plus(long, java.time.temporal.TemporalUnit);
  public java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount);
  public java.time.temporal.Temporal with(java.time.temporal.TemporalField, long);
  public java.time.temporal.Temporal with(java.time.temporal.TemporalAdjuster);
  public int compareTo(java.lang.Object);
  static {};
  */
  }
