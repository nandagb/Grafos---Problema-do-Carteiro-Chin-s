// @(#)$Id: BitSet.jml 1532 2005-08-19 18:41:37Z jkiniry $

// @author David R. Cok

package java.util;
//@ non_null_by_default
public class BitSet implements Cloneable, java.io.Serializable{
    // The logical representation is as an array of booleans.
    // One could also model this as a Set of ints.
    // Which would be easier to reason with?

    /*@
      @ immutable 
      @ model static class Content {}
      @ model public Content content;
      @
      @ public normal_behavior
      @   ensures \result >= 0;
      @ model public heap_free static pure int size(Content content);
      @
      @ public normal_behavior
      @   ensures \result >= 0;
      @ model public heap_free static pure int cardinality(Content content);
      @
      @ model public heap_free static pure boolean isSet(Content c, int index);
      @*/

    //@ normal_behavior
    //@   requires true;
    //-RAC@   ensures size(content) >= 0;
    //-RAC@   ensures cardinality(content) == 0;
    //-RAC@   ensures (\forall int i; 0 <= i; !isSet(content,i));
    //@ pure
    public BitSet();

    //@ public normal_behavior
    //@   requires true;
    //-RAC@   ensures size(content) >= nbits;
    //-RAC@   ensures cardinality(content) == 0;
    //-RAC@   ensures (\forall int i; 0 <= i; !isSet(content,i));
    //@ pure
    public BitSet(int nbits);

    // number of set bits
    //@ public normal_behavior
    //-RAC@   ensures \result == cardinality(content);
    //@   // num_of not implemented for proofs, and causes inconsistencies - FIXME
    //@   // ensures \result == (\num_of int i; 0<=i; isSet(content,i));
    //@ pure
    public int cardinality();

    //@ pure
    public int hashCode();

    // index of the highest set bit
    /*@ public normal_behavior
      @   ensures \result >= 0;
      @   ensures \result >= cardinality(); 
      @   ensures \result == 0 <==> isEmpty();
      @*/
    /*-RAC@
      @   ensures \result > 0 ==> (isSet(content,\result-1) &&
      @                      (\forall int i; \result <= i; !isSet(content,i)));
      @*/
    //@ pure
    public int length();

    //@ public normal_behavior
    //-RAC@   ensures \result == size(content);
    //@   ensures \result >= 0;
    //@   ensures \result >= length();
    //@ pure
    public int size();

    /*-RAC@ public normal_behavior
      @   assignable content;
      @   ensures isEmpty();
      @*/
    public void clear();

    //@ public normal_behavior
    //-RAC@   ensures \result <==> (\forall int i; 0<=i; !isSet(content,i));
    //@   ensures \result <==> cardinality() == 0;
    //@ pure
    public boolean isEmpty();

    // FIXME - review
    /*  @ public normal_behavior
      @   requires index > size(content);
      @   ensures \result == index;
      @   ensures !isSet(content,\result);
      @ also public normal_behavior
      @   requires 0 <= index && index <= size(content);
      @   ensures index <= \result;
      @   ensures (\forall int i; index<=i && i<\result; isSet(content,i));
      @   ensures !isSet(content,\result);
      @ also public exceptional_behavior
      @   requires index < 0;
      @   signals_only IndexOutOfBoundsException;
      @*/
    //@ pure
    public int nextClearBit(int index);

    // FIXME - review
    /*  @ public normal_behavior
      @   requires index > size(content);
      @   ensures \result == -1;
      @ also public normal_behavior
      @   requires 0 <= index && index <= size(content);
      @   ensures \result == -1 ==> (\forall int i; index<=i; !isSet(content,i));
      @   ensures \result != -1 ==> index <= \result;
      @   ensures (\forall int i; index<=i && i<\result; !isSet(content,i));
      @   ensures \result != -1 ==> isSet(content,\result);
      @ also public exceptional_behavior
      @   requires index < 0;
      @   signals_only IndexOutOfBoundsException;
      @*/
    //@ pure
    public int nextSetBit(int index);

    // FIXME - review
    /* @ public normal_behavior
      @   requires 0 <= i;
      @   assignable content;
      @   ensures isSet(content,i) == false;
      @   ensures (\forall int j; 0<=j && j != i;
      @                   isSet(content,j) == \old(isSet(content,j)));
      @   ensures \old(isSet(content,i)) ==>
                          cardinality(content) == \old(cardinality(content) - 1);
      @   ensures \old(!isSet(content,i)) ==>
                          cardinality(content) == \old(cardinality(content));
      @ also public exceptional_behavior
      @   requires i < 0;
      @   assignable \nothing;
      @   signals_only IndexOutOfBoundsException;
      @*/
    public void clear(int i);

    // FIXME - review
    /* @ public normal_behavior
      @   requires 0 <= i;
      @   assignable content;
      @   ensures isSet(content,i) == !\old(isSet(content,i));
      @   ensures (\forall int j; 0<=j && j != i;
      @                        isSet(content,j) == \old(isSet(content,j)));
      @   ensures size(content) >= Math.max(\old(size(content)),i+1);
      @   ensures \old(isSet(content,i)) ==>
                          cardinality() == \old(cardinality() - 1);
      @   ensures \old(!isSet(content,i)) ==>
                          cardinality() == \old(cardinality() + 1);
      @ also public exceptional_behavior
      @   requires i < 0;
      @   assignable \nothing;
      @   signals_only IndexOutOfBoundsException;
      @*/
    public void flip(int i);

    // FIXME - review
    /* @ public normal_behavior
      @   requires 0 <= bitIndex;
      @   assignable content;
      @   ensures isSet(content,bitIndex) == true;
      @   ensures (\forall int j; 0 <= j && j != bitIndex;
      @                        isSet(content,j) == \old(isSet(content,j)));
      @   ensures size(content) >= Math.max(\old(size(content)),bitIndex+1);
      @   ensures \old(!isSet(content,bitIndex)) ==>
                          cardinality() == \old(cardinality() + 1);
      @   ensures \old(isSet(content,bitIndex)) ==>
                          cardinality() == \old(cardinality());
      @ also public exceptional_behavior
      @   requires bitIndex < 0;
      @   assignable \nothing;
      @   signals_only IndexOutOfBoundsException;
      @*/
    public void set(int bitIndex);

    /*-RAC@ public normal_behavior
      @   requires 0 <= bitIndex;
      @   ensures \result == isSet(content,bitIndex);
      @ also public exceptional_behavior
      @   requires bitIndex < 0;
      @   signals_only IndexOutOfBoundsException;
      @*/
    //@ pure
    public boolean get(int bitIndex);

    // FIXME - review
    /* @ public normal_behavior
      @   requires 0 <= bitIndex;
      @   assignable content;
      @   ensures isSet(content,bitIndex) == v;
      @   ensures (\forall int j; 0 <= j && j != bitIndex;
      @                        isSet(content,j) == \old(isSet(content,j)));
      @   ensures v ==> size(content) >= Math.max(\old(size(content)),bitIndex+1);
      @   ensures (\old(isSet(content,i)) && !v) ==>
                          cardinality() == \old(cardinality() - 1);
      @   ensures (\old(!isSet(content,i)) && v) ==>
                          cardinality() == \old(cardinality() + 1);
      @   ensures (\old(isSet(content,i)) && v) ==>
                          cardinality() == \old(cardinality());
      @   ensures (\old(!isSet(content,i)) && !v) ==>
                          cardinality() == \old(cardinality());
      @ also public exceptional_behavior
      @   requires bitIndex < 0;
      @   assignable \nothing;
      @   signals_only IndexOutOfBoundsException;
      @*/
    public void set(int bitIndex, boolean v);

    // FIXME - review
    /* @ public normal_behavior
      @   requires 0 <= fromIndex;
      @   requires fromIndex <= toIndex;
      @   requires 0 <= toIndex;
      @   assignable content;
      @   ensures (\forall int j; fromIndex <= j && j < toIndex;
      @                   isSet(content,j) == false);
      @   ensures (\forall int j; ( 0<=j && j < fromIndex ) ||
      @                            toIndex <= j ;
      @                   isSet(content,j) == \old(isSet(content,j)));
      @   ensures cardinality(content) <= \old(cardinality(content));
      @ also public exceptional_behavior
      @   requires fromIndex < 0 || toIndex < 0 || fromIndex > toIndex;
      @   assignable \nothing;
      @   signals_only IndexOutOfBoundsException;
      @*/
    public void clear(int fromIndex,int toIndex);

    // FIXME - review
    /* @ public normal_behavior
      @   requires 0 <= fromIndex;
      @   requires fromIndex <= toIndex;
      @   requires 0 <= toIndex;
      @   assignable content;
      @   ensures (\forall int j; fromIndex <= j && j < toIndex;
      @                   isSet(content,j) == !\old(isSet(content,j)));
      @   ensures (\forall int j; ( 0<=j && j < fromIndex ) ||
      @                             toIndex <= j ;
      @                   isSet(content,j) == \old(isSet(content,j)));
      @   ensures size(content) >= Math.max(\old(size(content)),toIndex);
      @ also public exceptional_behavior
      @   requires fromIndex < 0 || toIndex < 0 || fromIndex > toIndex;
      @   assignable \nothing;
      @   signals_only IndexOutOfBoundsException;
      @*/
    public void flip(int fromIndex, int toIndex);

    // FIXME - review
    /* @ public normal_behavior
      @   requires 0 <= fromIndex;
      @   requires fromIndex <= toIndex;
      @   requires 0 <= toIndex;
      @   assignable content;
      @   ensures (\forall int j; fromIndex <= j && j < toIndex;
      @                   isSet(content,j) == true);
      @   ensures (\forall int j; ( 0<=j && j < fromIndex ) ||
      @                           ( toIndex <= j );
      @                   isSet(content,j) == \old(isSet(content,j)));
      @   ensures size(content) >= Math.max(\old(size(content)),toIndex);
      @   ensures cardinality() >= \old(cardinality());
      @ also public exceptional_behavior
      @   requires fromIndex < 0 || toIndex < 0 || fromIndex > toIndex;
      @   assignable \nothing;
      @   signals_only IndexOutOfBoundsException;
      @*/
    public void set(int fromIndex,int toIndex);

    // FIXME - review
    /* @ public normal_behavior
      @   requires 0 <= fromIndex;
      @   requires fromIndex <= toIndex;
      @   requires 0 <= toIndex;
      @   assignable content;
      @   ensures (\forall int j; fromIndex <= j && j < toIndex;
      @                   isSet(content,j) == b);
      @   ensures (\forall int j; ( 0<=j && j < fromIndex ) ||
      @                           ( toIndex <= j );
      @                   isSet(content,j) == \old(isSet(content,j)));
      @   ensures b ==> size(content) >= Math.max(\old(size(content)),toIndex);
      @   ensures b ==> cardinality() >= \old(cardinality());
      @   ensures !b ==> cardinality() <= \old(cardinality());
      @ also public exceptional_behavior
      @   requires fromIndex < 0 || toIndex < 0 || fromIndex > toIndex;
      @   assignable \nothing;
      @   signals_only IndexOutOfBoundsException;
      @*/
    public void set(int fromIndex,int toIndex,boolean b);


    // FIXME - review
    /* @ also public normal_behavior
      @   ensures \typeof(\result) == \type(BitSet);
      @   ensures \result != null; */
    /* @   ensures (\forall int i; 0<=i; isSet(((BitSet)\result).content,i) ==
      @                              isSet(content,i)); */
    /* @   ensures ((BitSet)\result).cardinality() == cardinality();
      @*/
    public Object clone();

    /*@ also public normal_behavior
      @   requires obj != null && obj instanceof BitSet; */
    /*-RAC@  ensures \result <==> (\forall int i; 
      @            0<=i;
      @                 isSet(content,i) == isSet(((BitSet)obj).content,i)); 
      @*/
    /*@   ensures (cardinality() != ((BitSet)obj).cardinality()) ==> !\result;
      @ also public normal_behavior
      @   requires obj == null || !(obj instanceof BitSet);
      @   ensures !\result;
      @*/
    //@ pure
    public boolean equals(/*@ nullable*/Object obj);

    // FIXME - review
    /* @ also public normal_behavior
      @   ensures \result != null && \result.length() > 0;
      @   ensures \result.charAt(0) == '{';
      @   ensures \result.charAt(\result.length()-1) == '}';
      @   // within the braces is a comma+space separated list of indices
      @   // for which the bit is set
      @*/
    //@ pure
    public String toString();

    // FIXME - review
    /*@ public normal_behavior
      @   requires 0 <= fromIndex <= toIndex;
      @   ensures \result != null; */
    /*-RAC@  ensures (\forall int i; 0 <= i < fromIndex; !isSet(\result.content,i));
      @   ensures (\forall int i; toIndex <= i; !isSet(\result.content,i));
      @   ensures (\forall int i; fromIndex <= i < toIndex;
      @                       isSet(\result.content,i) == isSet(content,i));
      @   ensures size(\result.content) >= toIndex; */
    /*@   ensures cardinality() >= \result.cardinality();
      @*/
    //@ pure
    public BitSet get(int fromIndex, int toIndex);

    // FIXME - review
    /* @ public normal_behavior
      @   requires set != null;
      @   old int sz = size(content);
      @   old int ssz = size(set.content);
      @   assignable content;
      @   ensures size(content) >= (sz<=ssz?ssz);
      @   ensures (\forall int i; 0<=i;
      @              isSet(content,i) <==>
      @                \old(isSet(content,i) && isSet(set,i)));
      @   ensures cardinality() <= \old(cardinality());
      @   ensures cardinality() <= \old(set());
      @ 
      @ also public exceptional_behavior
      @   requires set == null;
      @   signals_only NullPointerException;
      @*/
    public void and(BitSet set);

    /*@ public normal_behavior
      @   requires set != null;
      @   assignable content;
      @   ensures size(content) >= \old(size(content));
      @   ensures (\forall int i; 0<=i;
      @              isSet(content,i) <==>
      @                \old(isSet(content,i) && !isSet(set.content,i)));
      @   ensures cardinality() <= \old(cardinality());
      @ also public exceptional_behavior
      @   requires set == null;
      @   signals_only NullPointerException;
      @*/
    public void andNot(BitSet set);

    /*@ public normal_behavior
      @   requires set != null;
      @   old int sz = size(content);
      @   old int ssz = size(set.content);
      @   assignable content;
      @   ensures size(content) >= (sz>=ssz?sz:ssz); 
      @   ensures (\forall int i; 0<=i;
      @              isSet(content,i) <==>
      @                \old(isSet(content,i) || isSet(set.content,i)));
      @   ensures cardinality() >= \old(cardinality());
      @   ensures cardinality() >= \old(set.cardinality());
      @ also public exceptional_behavior
      @   requires set == null;
      @   signals_only NullPointerException;
      @*/
    public void or(BitSet set);

    /*@ public normal_behavior
      @   requires set != null;
      @   assignable content;
      @   ensures (\forall int i; 0<=i;
      @              isSet(content,i) <==>
      @                \old(isSet(content,i) != isSet(set.content,i)));
      @ also public exceptional_behavior
      @   requires set == null;
      @   signals_only NullPointerException;
      @*/
    public void xor(BitSet set);

    // FIXME - for all of these specs, if there is to be a exceptional_behavior clause, then the argumente cannot be by default NonNull
    /*@ public normal_behavior
      @   requires set != null;
      @   ensures \result <==> (\exists int i; 0<=i ;
      @                isSet(content,i) && isSet(set.content,i));
      @ also public exceptional_behavior
      @   requires set == null;
      @   signals_only NullPointerException;
      @*/
    //@ pure
    public boolean intersects(BitSet set);
}

