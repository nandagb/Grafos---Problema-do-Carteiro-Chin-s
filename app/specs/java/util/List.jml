// @(#)$Id: List.spec 1398 2005-05-09 07:22:32Z chalin $

// Copyright (C) 2000 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

package java.util;

/** JML's specification of java.util.List.
 * @version $Revision: 1398 $
 * @author Brandon Shilling
 * @author Gary T. Leavens
 * @author Erik Poll
 */
public interface List<E> extends SequencedCollection<E> {

    /*@ public normal_behavior
      @   ensures \result;
      @ public pure model boolean initialList();
      @*/

//    //@ model pure public static heap_free helper Object get(Content c, \bigint i);

//    /*-RAC@ public normal_behavior
//      @   ensures \result <==> ( c.theSize == cc.theSize &&
//      @     (\forall \bigint i; 0<=i && i<c.theSize; get(c,i) == get(cc,i)));
//      @*/
//    //-RAC@ heap_free
//    //-RAC@ public pure static model boolean equals(Content c, Content cc);

    // specification inherited
    //@ pure helper
    int size();

    // specification inherited
    //@ pure
    boolean isEmpty();

    //@ pure // FIXME - this ought to be simply inherited
    boolean contains(/*@nullable*/ Object o);

    /*@ also
      @ public behavior
      @   ensures \result != null;
      @*/
    /* FIXME
      @   ensures size() < Integer.MAX_VALUE
      @       ==> (\forall int i; 0 <= i && i < size();
      @                \result.hasNext(i) && \result.nthNextElement(i)
      @                 == toArray()[i]);
      @*/
    /*@ pure @*/ Iterator<E> iterator();

    //@ also
    //@  public normal_behavior
    //@   requires size() < Integer.MAX_VALUE;
    //@   ensures \result != null;
    //@   ensures \result.length == size();
    //-RAC@   ensures (\forall int i; 0<=i && i < size(); \result[i] == values[i]);
    //+RAC@   ensures (\forall int i; 0<=i && i < size(); \result[i] == get(i));
    //@ pure
    Object[] toArray();

    /*-RAC@ also
      @ public normal_behavior
      @   requires a != null; 
      @   old int arrSize = a.length;
      @   old int colSize = size();
      @   {|
      @     requires colSize <= arrSize;
      @     assignable a[*];
      @     ensures \result == a;
      @     ensures (\forall int k; 0 <= k && k < colSize;
      @                             \result[k] == values[k]);
      @     ensures (\forall int i; colSize <= i && i < arrSize;
      @                             \result[i] == null);
      @   also
      @     requires colSize > arrSize;
      @     assignable \nothing;
      @     ensures \fresh(\result) && \result.length == colSize;
      @     ensures (\forall int k; 0 <= k && k < colSize;
      @                             \result[k] == values[k]);
      @   |}
      @ also public exceptional_behavior
      @   requires a == null;
      @   signals_only NullPointerException;

              // FIXME - spec the exceptions
      @*/
    <T> T[] toArray(T[] a) throws NullPointerException;

    /*-RAC@ also public normal_behavior
      @   requires containsNull || o != null;
      @   assignable values;
      @   ensures \result;
      @   ensures values == \old(values).add(o); 
      @   ensures values[values.length-1] == o;
      @   ensures \forall \bigint i; 0 <= i < values.length-1; 
      @                    values[i] == \old(values[i]); 
      @   ensures values.contains(o);
      @*/
    boolean add(E o);


    /*-RAC@
      @ also public normal_behavior
      @   requires values.contains(o);
      @   assignable values;
      @   ensures !\result ==> values.length == \old(values.length);
      @   ensures \result ==> values.length == \old(values.length-1);
      @*/
    /* FIXME @ ensures (\exists \bigint j; 0<=j && j<\old(size()) && Collection.nullequals(o,get(content,j));
              (\forall \bigint k; 0<=k && k<j; get(content,k) == \old(get(content,k)))
          &&  (\forall \bigint k; j<k && k<content.theSize; get(content,k-1)==\old(get(content,k+1)))); */
    /*-RAC@ also public exceptional_behavior
      @   requires !values.contains(o);
      @   assignable \nothing;
      @   signals_only NoSuchElementException;
      @*/
    // FIXME - watch out for optional exceptions
    boolean remove(Object o);

    // specification inherited
    //@ pure
    boolean containsAll(Collection<?> c);

    // FIXME
    boolean addAll(Collection<? extends E> c);

    // inherited spec
    // FIXME - retains order
    boolean removeAll(Collection<?> c) throws NullPointerException;

    // inherited spec
    // FIXME - retains order
    boolean retainAll(Collection<?> c) throws NullPointerException;

    public default java.util.List<E> reversed();
    
    // specification inherited
    void clear();

    /*-RAC@ also
      @ public normal_behavior
      @   requires o instanceof List && size() == ((List) o).size(); 
      @   ensures \result <==> (\forall \bigint i; 0 <= i < values.length; // FIXME:  \bigint instead of int
      @       Objects.equals(values[i],((List<E>)o).values[i])); 
      @ also public normal_behavior
      @   requires !(o instanceof List && size() == ((List<E>) o).size());
      @   ensures !\result;
      @*/
    @SuppressWarnings("unchecked")
    /*@ pure @*/ boolean equals(Object o);

    // specification inherited
    int hashCode();

    //@ public normal_behavior
    //@   requires 0 <= index && index < size();
    //-RAC@   ensures \result == values[index];
    //-RAC@   ensures !containsNull ==> \result != null;
    //@ also
    //@ public exceptional_behavior
    //@   requires !(0 <= index && index < size());
    //@   signals_only IndexOutOfBoundsException;
    //@  // FIXME - other exceptions
    /*@ pure @*/ E get(int index);

    /*-RAC@
      @ public behavior
      @ requires !containsNull ==> element != null;
      @ {|
      @   requires 0 <= index && index < size();
      @   assignable objectState;
      @   ensures \not_modified(containsNull,values.length);
      @   ensures \result == (\old(get(index)));
      @   ensures get(index) == element;
      @   //  ensures (\forall \bigint i; 0<=i && i<content.theSize && i != index;  FIXME - fix the use of get(content,i)
      @   //            get(content,i) == \old(get(content,i)));
      @   signals_only UnsupportedOperationException, ClassCastException,
                         NullPointerException, IllegalArgumentException;
      @   signals (UnsupportedOperationException)
      @           (* set method not supported by list *);
      @   signals (ClassCastException)
      @           (* class of specified element prevents it
      @              from being added to this *);
      @   signals (NullPointerException)
      @            (* element is null and null elements
      @               not supported by this *);
      @   signals (IllegalArgumentException)
      @            (* some aspect of element prevents it
      @               from being added to this *);
      @ also
      @   requires !(0 <= index && index < size());
      @   assignable \nothing;
      @   ensures false;
      @   signals_only IndexOutOfBoundsException;
      @ |}
      @*/
    E set(int index, E element);
    
    /*-RAC@ public behavior
      @   requires !containsNull ==> element != null;
      @   {|
      @     requires  0 <= index && index <= size();
      @     assignable objectState;
      @     ensures \not_modified(containsNull);
      @     ensures values.length == \old(values.length)+1;
      @     ensures values[index] == element;
      @     ensures (\forall int i; 0 <= i < index;
      @                     values[i] == \old(values[i]));
      @     ensures (\forall int i; index <= i < \old(size());
      @                     \old(values[i]) == values[i+1]);
      @     signals_only UnsupportedOperationException, ClassCastException,
                         NullPointerException, IllegalArgumentException;
      @     signals (UnsupportedOperationException)
      @             (* add method not supported by list *);
      @     signals (ClassCastException)
      @             (* class of specified element prevents it
      @                from being added to this *);
      @     signals (NullPointerException)
      @             (* element is null and null elements are not
      @                supported by this *);
      @     signals (IllegalArgumentException)
      @             (* some aspect of element
      @                prevents it from being added to this *);
      @ also
      @   requires !(0 <= index && index <= size());
      @   assignable \nothing;
      @   ensures false;
      @   signals_only IndexOutOfBoundsException;
      @ |}
      @*/
    /*+RAC@ public behavior
      @   requires  0 <= index && index <= size();
      @   assignable objectState;
      @   signals_only UnsupportedOperationException, ClassCastException,
                         NullPointerException, IllegalArgumentException;
      @ also
      @   requires !(0 <= index && index <= size());
      @   assignable \nothing;
      @   ensures false;
      @   signals_only IndexOutOfBoundsException;
      @ 
      @*/
    void add(int index, E element);

    /*-RAC@ public behavior
      @   requires  0 <= index && index < size();
      @   assignable objectState;
      @   ensures \not_modified(containsNull);
      @   ensures !containsNull ==> \result != null;
      @   ensures values.length == \old(values.length)-1;
      @   ensures \result == (\old(values[index])) ;
      @   ensures (\forall int i; 0 <= i && i < index;
      @                values[i] == (\old(values[i])))
      @        && (\forall int i; index <= i < values.length;
      @                 values[i] == \old(values[i+1]));
      @   signals_only UnsupportedOperationException;
      @   signals (UnsupportedOperationException)
      @            (* remove method not supported by list *);
          // FIXME - other exceptions?
      @ also public exceptional_behavior
      @   requires !(0 <= index && index < size());
      @   assignable \nothing;
      @   signals_only IndexOutOfBoundsException;
      @*/
    E remove(int index);

    /*@ public behavior
      @   ensures -1 <= \result < size();
      @   ensures \result == -1 <==> !contains(o);
      @   //-RAC@ ensures \result >= 0 ==> Objects.equals(o, values[\result]);
      @   //-RAC@ ensures (\forall int i; 0 <= i < \result; !Objects.equals(o, values[i]));
      @   //-RAC@ ensures \result == -1 <==> (\forall int i; 0 <= i < size(); !Objects.equals(o, values[i]));
      @   signals_only ClassCastException, NullPointerException;
      @   signals (ClassCastException)
      @           (* class of specified element is incompatible with this *);
      @   signals (NullPointerException)
      @            (* element is null and null elements are not
      @               supported by this *);
      @*/
    /*@ pure @*/ int indexOf(/*@ nullable*/Object o);

    /*@ public behavior
      @   ensures \result >= -1 && \result < size();
      @   ensures \result == -1 <==> !contains(o);
      @   signals_only ClassCastException, NullPointerException;
      @   signals (ClassCastException)
      @           (* class of specified element is incompatible with this *);
      @   signals (NullPointerException)
      @            (* element is null and null elements are not
      @               supported by this *);
      @*/
    /*-RAC@
      @   ensures \result != -1 ==> Objects.equals(o,values[\result]);
      @   ensures (\forall int i; \result<i && i < size(); !Objects.equals(o,values[i]));
      @*/
    /*@ pure @*/ int lastIndexOf(Object o);

    /* FIXME @ 
      @ public normal_behavior
      @   ensures \result != null && size() < Integer.MAX_VALUE
      @       ==> (\forall int i; 0 <= i && i < size();
      @                \result.hasNext(i) && \result.nthNextElement(i)
      @                 == toArray()[i]);
      @   ensures containsNull == \result.returnsNull;
      @*/
    /*@ pure @*/ /*@ non_null @*/ ListIterator<E> listIterator();

    /* FIXME @ 
      @ public normal_behavior
      @   requires 0 <= index && index < size();
      @   ensures \result != null && size() < Integer.MAX_VALUE
      @       ==> (\forall int i; index <= i && i < size();
      @                \result.hasNext(i) && \result.nthNextElement(i)
      @                 == toArray()[i]);
      @ also
      @ public exceptional_behavior
      @   requires index < 0 && size() <= index;
      @   signals_only IndexOutOfBoundsException;
      @
      @  implies_that
      @     ensures containsNull == \result.returnsNull;
      @*/
    /*@ pure @*/ /*@ non_null @*/ ListIterator<E> listIterator(int index);

    // FIXME - changes to a sublist affect the list it is a sublist of!!!
    //@ public normal_behavior
    //@   requires 0 <= fromIndex && fromIndex <= size() && 0 <= toIndex && toIndex <= size() && fromIndex <= toIndex;
    //@   ensures \result.size() == toIndex - fromIndex;
    //-RAC@   ensures (\forall int i; fromIndex <=i && i < toIndex; values[i] == \result.values[i-fromIndex]);
    //@ also
    /*@ public exceptional_behavior
      @   requires !(0 <= fromIndex && fromIndex <= size())
      @         || !( 0 <= toIndex && toIndex <= size())
      @         || !(fromIndex <= toIndex);
      @   signals_only IndexOutOfBoundsException;
      @
      @*/
    /*@ pure @*/ List<E> subList(int fromIndex, int toIndex);
}
