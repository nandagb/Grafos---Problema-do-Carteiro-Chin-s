package java.util;
import java.util.function.*;

//@ non_null_by_default immutable
public final class Optional<T> {
//  //@ spec_public
//  private static final Optional<?> EMPTY;
//  //@ public static final invariant EMPTY.value == null;
  
  //@ spec_public
  private final /*@ nullable */ T value;
  
  //@ public normal_behavior
  //-RAC@   ensures \result.value == null;
  //@ pure helper // Not a function, since may or may not be fresh
  public static <T> Optional<T> empty();

  //@ private normal_behavior
  //@   requires value != null;
  //@   ensures this.value == value;
  //@ also private exceptional_behavior
  //@   requires value == null;
  //@   signals_only NullPointerException;
  //@ pure
  private Optional(T value); // non-null required

  //@ public normal_behavior
  //@   requires value != null;
  //-RAC@   ensures \fresh(\result);
  //-RAC@   ensures \result.value == value;
  //+RAC@   ensures \result.get() == value;
  //@ also public exceptional_behavior
  //@   requires value == null;
  //@   signals_only NullPointerException;
  //@ pure heap_free helper
  public static <T> Optional<T> of(T value); // non-null required

  //@ public normal_behavior
  //-RAC@   ensures \fresh(\result);
  //-RAC@   ensures \result.value == value;
  //+RAC@   ensures \result.get() == value;
  //@ pure helper
  public static <T> Optional<T> ofNullable(/*@ nullable */ T value);
  
  //-RAC@ public normal_behavior
  //-RAC@   requires value != null;
  //-RAC@   ensures \result == value;
  //-RAC@ also public exceptional_behavior
  //-RAC@   requires value == null;
  //-RAC@   signals_only NoSuchElementException;
  //@ pure heap_free helper
  public T get();
  
  //@ public normal_behavior
  //-RAC@   ensures \result == (value != null);
  //+RAC@   ensures \result == (get() != null);
  //@ pure heap_free helper
  public boolean isPresent();
  
  
  //-RAC@ public model_program { if (value != null) action.accept(value); }
  //+RAC@ public model_program { if (get() != null) action.accept(value); }
  public void ifPresent(Consumer<? super T> action);

  /*@ public model_program 
  @   { if (predicate == null) throw new NullPointerException(); return Optional.ofNullable( value == null || !predicate.test(value) ? null : value); }
  @*/
  //@ pure helper
  public Optional<T> filter(Predicate<? super T> predicate);
  
  /*@ public behavior // TODO: Needed to workaround a problem matching types between the binary library and the JML model program code
    @   { if (mapper==null) throw new NullPointerException(); return !isPresent() ? Optional.<U>empty() : Optional.<U>ofNullable( mapper.apply(value) ) ; }
    @*/
  public <U> Optional<U> map(Function<? super T, ? extends U> mapper);
  
  /*@ public behavior // TODO: Needed to workaround a problem matching types between the binary library and the JML model program code
    @   requires true;
    @   //{ if (mapper==null) throw new NullPointerException(); if (!isPresent()) return Optional.<? extends U>empty(); ghost Optional<? extends U> r = mapper.apply(value); if (r == null) throw new NullPointerException(); return r; }
    @*/
  public <U> Optional<U> flatMap(Function<? super T, ? extends Optional<? extends U>> mapper);

  //@ public normal_behavior
  //@   { return isPresent() ? this.get() : other; }
  //@ pure
  public T orElse(T other);

  //@ public behavior
  //@   { return (value != null ? value : supplier.get() ); }
  //@ pure
  public T orElseGet(Supplier<? extends T> supplier);
  
  //@ public normal_behavior 
  //@   requires value != null;
  //@   ensures \result == value;
  //@ also public exceptional_behavior
  //@   requires value == null;
  //@   signals_only NoSuchElementException;
  //@ pure
  public T orElseThrow() throws NoSuchElementException;
  
  /*-RAC@ public behavior 
    @    { if (value!=null) return value; else throw exceptionSupplier.get(); }
    @*/
  //@ pure  // FIXME - really only pure if the lambda expression is pure
  public <X extends java.lang.Throwable> T orElseThrow( Supplier<? extends X> exceptionSupplier) throws X;

  // inherited
  public boolean equals(java.lang.Object o);
  
  // inherited
  public int hashCode();
  
  // inherited
  public java.lang.String toString();
}
