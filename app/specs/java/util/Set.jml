// @(#)$Id: Set.spec 2226 2006-12-13 01:57:30Z chalin $

// Adapted in part from Compaq SRC's specification for ESC/Java

// Copyright (C) 2000, 2002 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

package java.util;

/** JML's specification of java.util.Set.
 * @version $Revision: 2226 $
 * @author Brandon Shilling
 * @author Gary T. Leavens
 */
//@ non_null_by_default
public interface Set<E> extends Collection<E> {

    /*@ public normal_behavior
      @   ensures \result;
      @ public pure model boolean initialSet();
      @*/

    // specification inherited
    /*@ pure */ int size();

    // specification inherited
    boolean isEmpty();

    // specification inherited 
    /*@ pure */ boolean contains(/*@ nullable */ Object o);

    // specification inherited
    Iterator<E> iterator();

    // specification inherited
    /*@ non_null*/ Object[] toArray();

//    // specification inherited  // FIXME 
//    <T> T /*@ non_null*/[] toArray(T /*@ non_null*/ [] a) throws NullPointerException;

    // specification inherited
    boolean add(/*@ nullable*/ E o);

    /*-RAC@ also
       @ public normal_behavior
       @   requires contains(o);
       @   assignable values;
       @   ensures \result;
       @   ensures !contains(o);
       @*/
    //@ also public behavior
    //-RAC@   requires !containsNull ==> o != null;
    //@   requires !contains(o);
    //@   assignable \nothing; 
    //@   ensures !\result;
    boolean remove(/*@ nullable*/ Object o);

    // Bulk Operations

    // specs are inherited
    //@ pure
    boolean containsAll(/*@ non_null*/ Collection<?> c) throws NullPointerException;

    // specs are inherited
    boolean addAll(/*@ non_null*/ Collection<? extends E> c) throws NullPointerException;

    // specs are inherited
    boolean retainAll(/*@ non_null*/ Collection<?> c) throws NullPointerException;

    /*-RAC@ also public normal_behavior
       @   requires c != null;
       @   assignable values;
       @   ensures \old(c.contains(null)) ==> !contains(null);
       @   ensures (\forall Object o; c.contains(o) <==>
                      (\old(contains(o)) && !\old(c.contains(o))));
       @   ensures size() <= \old(size());
       @   ensures \result <==> size() != \old(size());
       @*/
    boolean removeAll(/*@ non_null*/ Collection<?> c) throws NullPointerException;

    // specification inherited
    void clear();

    // Comparison and hashing

    //@ also public normal_behavior
    //@   requires o != null;
    //@   requires o instanceof Set;
    /*@   ensures \result <==>
               ((\forall Object oo; contains(oo) <==> ((Set)o).contains(oo))
             && contains(null) <==> ((Set)o).contains(null)); */
    //-RAC@   ensures  \result ==> (values.length == ((Set)o).values.length);
    /*@ pure @*/ boolean equals(/*@ nullable*/ Object o);

    // specification inherited
    int hashCode();
    
    //@ public normal_behavior
    //@ ensures \result.size() == 0;
    //@ pure
    public static <E> java.util.Set<E> of();
    //@ public normal_behavior
    //@ ensures \result.size() == 1;
    //@ pure
    public static <E> java.util.Set<E> of(E e0);
    //@ public normal_behavior
    //@ ensures \result.size() <= 2;
    //@ pure
    public static <E> java.util.Set<E> of(E e0, E e1);
    //@ public normal_behavior
    //@ ensures \result.size() <= 3;
    //@ pure
    public static <E> java.util.Set<E> of(E e0, E e1, E e2);
    //@ public normal_behavior
    //@ ensures \result.size() <= 4;
    //@ pure
    public static <E> java.util.Set<E> of(E e0, E e1, E e2, E e3);
    //@ public normal_behavior
    //@ ensures \result.size() <= 5;
    //@ pure
    public static <E> java.util.Set<E> of(E e0, E e1, E e2, E e3, E e4);
    //@ public normal_behavior
    //@ ensures \result.size() <= 6;
    //@ pure
    public static <E> java.util.Set<E> of(E e0, E e1, E e2, E e3, E e4, E e5);
    //@ public normal_behavior
    //@ ensures \result.size() <= 7;
    //@ pure
    public static <E> java.util.Set<E> of(E e0, E e1, E e2, E e3, E e4, E e5, E e6);
    //@ public normal_behavior
    //@ ensures \result.size() <= 8;
    //@ pure
    public static <E> java.util.Set<E> of(E e0, E e1, E e2, E e3, E e4, E e5, E e6, E e7);
    //@ public normal_behavior
    //@ ensures \result.size() <= 9;
    //@ pure
    public static <E> java.util.Set<E> of(E e0, E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8);
    //@ public normal_behavior
    //@ ensures \result.size() <= 10;
    //@ pure
    public static <E> java.util.Set<E> of(E e0, E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9);
    //@ public normal_behavior
    //@ ensures elements != null ==> \result.size() <= elements.length;
    //@ pure
    @SuppressWarnings("unchecked")
    public static <E> java.util.Set<E> of(E... elements);

}
