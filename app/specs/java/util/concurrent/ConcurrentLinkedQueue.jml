package java.util.concurrent;

//@ non_null_by_default
public class ConcurrentLinkedQueue<E> extends java.util.AbstractQueue<E> implements java.util.Queue<E>, java.io.Serializable {
//  private static final long serialVersionUID;
//  private volatile transient ConcurrentLinkedQueue$Node<E> head;
//  private volatile transient ConcurrentLinkedQueue$Node<E> tail;
//  private static final sun.misc.Unsafe UNSAFE;
//  private static final long headOffset;
//  private static final long tailOffset;
    
    //@ public normal_behavior
    //@   ensures this.values.length == 0;
    //@   ensures \nonnullelements(this.values);
    //@ pure
    public ConcurrentLinkedQueue();
    //@ public normal_behavior
    //@   ensures true;
    //@ pure
    public ConcurrentLinkedQueue(java.util.Collection<? extends E> collection);
    //@ also public normal_behavior
    //@   requires !this.containsNull ==> element != null;
    //@   assignable this.values;
    //@   ensures this.values.length == \old(this.values.length) + 1;
    public boolean add(/*@ nullable */ E element);
//  final void updateHead(ConcurrentLinkedQueue$Node<E>, ConcurrentLinkedQueue$Node<E>);
//  final ConcurrentLinkedQueue$Node<E> succ(ConcurrentLinkedQueue$Node<E>);
//  public boolean offer(E);
//  public E poll();
//  public E peek();
//  ConcurrentLinkedQueue$Node<E> first();

    //@ also public normal_behavior
    //@   ensures \result == (this.values.length == 0);
    //@ pure
    public boolean isEmpty();

    //@ also public normal_behavior
    //@   ensures \result == this.values.length;
    //@ pure
    public int size();
//  public boolean contains(java.lang.Object);

    //@ also public normal_behavior
    public boolean remove(java.lang.Object element);

//  public boolean addAll(java.util.Collection<? extends E>);
//  public java.lang.Object[] toArray();
//  public <T> T[] toArray(T[]);
//  public java.util.Iterator<E> iterator();
//  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
//  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
//  public java.util.Spliterator<E> spliterator();
//  private static void checkNotNull(java.lang.Object);
//  private boolean casTail(ConcurrentLinkedQueue$Node<E>, ConcurrentLinkedQueue$Node<E>);
//  private boolean casHead(ConcurrentLinkedQueue$Node<E>, ConcurrentLinkedQueue$Node<E>);

}
