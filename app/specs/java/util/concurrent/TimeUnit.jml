package java.util.concurrent;
// SInce 1.5

//@ immutable
public enum TimeUnit {
     NANOSECONDS(1L),
     MICROSECONDS(1000L),
     MILLISECONDS(1000000L),
     SECONDS(1000000000L),
     MINUTES(60*1000000000L),
     HOURS(60*60*1000000000L),
     DAYS(24*60*60*1000000000L);

    //@ model public long _scale;
    //@ public final static invariant NANOSECONDS._scale == 1L;
    //@ public final static invariant MICROSECONDS._scale == 1000L;
    //@ public final static invariant MILLISECONDS._scale == 1000L * 1000L;
    //@ public final static invariant SECONDS._scale == 1000L * 1000L * 1000L;
    //@ public final static invariant MINUTES._scale == 1000L * 1000L * 1000L * 60L;
    //@ public final static invariant HOURS._scale == 1000L * 1000L * 1000L * 60L * 60L;
    //@ public final static invariant DAYS._scale == 1000L * 1000L * 1000L * 60L * 60L * 24L;
    
    //@ public final invariant this._scale >= 1L;
  
    // Converts t units of TimeUnit u into the result expressed ain the receiver's unit
    // Relies on the fact that the scale values are multiples of each other
  //@ public normal_behavior
  //@  requires u._scale <= this._scale;
  //@  ensures \result == t / (this._scale / u._scale);
  //@ also public normal_behavior
  //@  requires u._scale > this._scale && Long.MIN_VALUE <= t * (u._scale / this._scale) <= Long.MAX_VALUE;
  //@  ensures \result == t * (u._scale / this._scale);
  //@ also public normal_behavior
  //@  requires u._scale > this._scale && t * (u._scale / this._scale) > Long.MAX_VALUE;
  //@  ensures \result == Long.MAX_VALUE;
  //@ also public normal_behavior
  //@  requires u._scale > this._scale && t * (u._scale / this._scale) < Long.MIN_VALUE;
  //@  ensures \result == Long.MIN_VALUE;
  //@ pure heap_free
  public long convert(long t, TimeUnit u);
  
  //@ public normal_behavior
  //@  requires t <= Long.MAX_VALUE/_scale;
  //@  ensures \result == t * this._scale / NANOSECONDS._scale;
  //@ pure heap_free
  public long toNanos(long t);
  
  //@ public normal_behavior
  //@   requires this._scale >= MICROSECONDS._scale;
  //@   requires Long.MIN_VALUE <= t * (this._scale / MICROSECONDS._scale) <= Long.MAX_VALUE;
  //@   ensures \result == t * (this._scale / MICROSECONDS._scale);
  //@ also public normal_behavior
  //@   requires this._scale < MICROSECONDS._scale;
  //@   ensures \result == t / (MICROSECONDS._scale / this._scale);
  //@ pure heap_free
  public long toMicros(long t);
  
  //@ public normal_behavior
  //@   requires this._scale >= MILLISECONDS._scale;
  //@   requires Long.MIN_VALUE <= t * (this._scale / MILLISECONDS._scale) <= Long.MAX_VALUE;
  //@   ensures \result == t * (this._scale / MILLISECONDS._scale);
  //@ also public normal_behavior
  //@   requires this._scale < MILLISECONDS._scale;
  //@   ensures \result == t / (MILLISECONDS._scale / this._scale);
  //@ pure heap_free
  public long toMillis(long t);
  
  //@ public normal_behavior
  //@   requires this._scale >= SECONDS._scale;
  //@   requires Long.MIN_VALUE <= t * (this._scale / SECONDS._scale) <= Long.MAX_VALUE;
  //@   ensures \result == t * (this._scale / SECONDS._scale);
  //@ also public normal_behavior
  //@   requires this._scale < SECONDS._scale;
  //@   ensures \result == t / (SECONDS._scale / this._scale);
  //@ pure heap_free
  public long toSeconds(long t);
  
  //@ public normal_behavior
  //@   requires this._scale >= MINUTES._scale;
  //@   requires Long.MIN_VALUE <= t * (this._scale / MINUTES._scale) <= Long.MAX_VALUE;
  //@   ensures \result == t * (this._scale / MINUTES._scale);
  //@ also public normal_behavior
  //@   requires this._scale < MINUTES._scale;
  //@   ensures \result == t / (MINUTES._scale / this._scale);
  //@ pure heap_free
  public long toMinutes(long t);
  
  //@ public normal_behavior
  //@   requires this._scale >= HOURS._scale;
  //@   requires Long.MIN_VALUE <= t * (this._scale / HOURS._scale) <= Long.MAX_VALUE;
  //@   ensures \result == t * (this._scale / HOURS._scale);
  //@ also public normal_behavior
  //@   requires this._scale < HOURS._scale;
  //@   ensures \result == t / (HOURS._scale / this._scale);
  //@ pure heap_free
  public long toHours(long t);
  
  //@ public normal_behavior
  //@   requires this._scale >= DAYS._scale;
  //@   requires Long.MIN_VALUE <= t * (this._scale / DAYS._scale) <= Long.MAX_VALUE;
  //@   ensures \result == t * (this._scale / DAYS._scale);
  //@ also public normal_behavior
  //@   requires this._scale < DAYS._scale;
  //@   ensures \result == t / (DAYS._scale / this._scale);
  //@ pure heap_free
  public long toDays(long t);

//  abstract int excessNanos(long t1, long t2);
 // public void timedWait(java.lang.Object, long) throws java.lang.InterruptedException;
//  public void timedJoin(java.lang.Thread, long) throws java.lang.InterruptedException;
//  public void sleep(long) throws java.lang.InterruptedException;

  private TimeUnit(long v);

//  static {};
}
