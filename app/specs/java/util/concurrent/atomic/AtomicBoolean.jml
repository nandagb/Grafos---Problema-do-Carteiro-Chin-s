package java.util.concurrent.atomic;

public class AtomicBoolean implements java.io.Serializable {

  /*@ spec_public */ private volatile int value;

  //@ public normal_behavior
  //@   ensures value == (v ? 1:0);
  //@ pure
  public AtomicBoolean(boolean v);

  //@ public normal_behavior
  //@   ensures value == 0;
  //@ pure
  public AtomicBoolean();

  //@ public normal_behavior
  //-RAC@   ensures \result == (value != 0);
  //+RAC@   ensures true;
  //@ pure helper
  public final boolean get();

  //-RAC@ public normal_behavior
  //-RAC@   requires value == (v?1:0);
  //-RAC@   assignable value;
  //-RAC@   ensures \result;
  //-RAC@   ensures value == (vv?1:0);
  //-RAC@ also public normal_behavior
  //-RAC@   requires value != (v?1:0);
  //-RAC@   assignable \nothing;
  //-RAC@   ensures !\result;
  public final boolean compareAndSet(boolean v, boolean vv);

  //-RAC@ public normal_behavior
  //-RAC@   requires value == (v?1:0);
  //-RAC@   assignable value;
  //-RAC@   ensures \result;
  //-RAC@   ensures value == (vv?1:0);
  //-RAC@ also public normal_behavior
  //-RAC@   requires value != (v?1:0);
  //-RAC@   assignable \nothing;
  //-RAC@   ensures !\result;
  public boolean weakCompareAndSet(boolean v, boolean vv);

  //@ public normal_behavior
  //@   assignable value;
  //@   ensures get() == v;
  public final void set(boolean v);

  //@ public normal_behavior
  //@   assignable value;
  //@   ensures get() == v;
  public final void lazySet(boolean v);

  //-RAC@ public normal_behavior
  //-RAC@   assignable value;
  //-RAC@   ensures value == (v?1:0);
  //-RAC@   ensures \result == (\old(value) != 0);
  public final boolean getAndSet(boolean v);

  //@ also public normal_behavior
  //@   assignable \nothing;
  //@   ensures (* TODO: result is string representation of get() *);
  public java.lang.String toString();
}
