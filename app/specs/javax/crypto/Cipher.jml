package javax.crypto;

//@ non_null_by_default
public class Cipher {
    
    //@ model public instance JMLDataGroup content;
    
    //@ model public static pure heap_free boolean validAlgorithm(String algorithm);
    
//      private static final sun.security.util.Debug debug;
//      private static final sun.security.util.Debug pdebug;
//      private static final boolean skipDebug;
//      public static final int ENCRYPT_MODE;
//      public static final int DECRYPT_MODE;
//      public static final int WRAP_MODE;
//      public static final int UNWRAP_MODE;
//      public static final int PUBLIC_KEY;
//      public static final int PRIVATE_KEY;
//      public static final int SECRET_KEY;
//      private java.security.Provider provider;
//      private javax.crypto.CipherSpi spi;
//      private java.lang.String transformation;
//      private javax.crypto.CryptoPermission cryptoPerm;
//      private javax.crypto.ExemptionMechanism exmech;
//      private boolean initialized;
//      private int opmode;
//      private static final java.lang.String KEY_USAGE_EXTENSION_OID;
//      private javax.crypto.CipherSpi firstSpi;
//      private java.security.Provider$Service firstService;
//      private java.util.Iterator<java.security.Provider$Service> serviceIterator;
//      private java.util.List<javax.crypto.Cipher$Transform> transforms;
//      private final java.lang.Object lock;
//      private static final java.lang.String ATTR_MODE;
//      private static final java.lang.String ATTR_PAD;
//      private static final int S_NO;
//      private static final int S_MAYBE;
//      private static final int S_YES;
//      private static int warnCount;
//      private static final int I_KEY;
//      private static final int I_PARAMSPEC;
//      private static final int I_PARAMS;
//      private static final int I_CERT;
//      protected javax.crypto.Cipher(javax.crypto.CipherSpi, java.security.Provider, java.lang.String);
//      javax.crypto.Cipher(javax.crypto.CipherSpi, java.lang.String);
//      private javax.crypto.Cipher(javax.crypto.CipherSpi, java.security.Provider$Service, java.util.Iterator<java.security.Provider$Service>, java.lang.String, java.util.List<javax.crypto.Cipher$Transform>);
//      private static java.lang.String[] tokenizeTransformation(java.lang.String) throws java.security.NoSuchAlgorithmException;
//      private static java.util.List<javax.crypto.Cipher$Transform> getTransforms(java.lang.String) throws java.security.NoSuchAlgorithmException;
//      private static javax.crypto.Cipher$Transform getTransform(java.security.Provider$Service, java.util.List<javax.crypto.Cipher$Transform>);

    //@ model public boolean isInitialized; in content;
    
    //@ public normal_behavior
    //@   ensures \fresh(\result);
    //@ pure
    public static final javax.crypto.Cipher getInstance(java.lang.String s) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException;
    
    //@ public normal_behavior
    //@   ensures \fresh(\result);
    //@ pure
    public static final javax.crypto.Cipher getInstance(java.lang.String s, java.lang.String ss) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, javax.crypto.NoSuchPaddingException;

    //@ public normal_behavior
    //@   ensures \fresh(\result);
    //@ pure
    public static final javax.crypto.Cipher getInstance(java.lang.String s, java.security.Provider provider) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException;
//      private void initCryptoPermission() throws java.security.NoSuchAlgorithmException;
//      void chooseFirstProvider();
//      private void implInit(javax.crypto.CipherSpi, int, int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;
//      private void chooseProvider(int, int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;
//      public final java.security.Provider getProvider();
//      public final java.lang.String getAlgorithm();
//      public final int getBlockSize();
//      public final int getOutputSize(int);
//      public final byte[] getIV();
//      public final java.security.AlgorithmParameters getParameters();
//      public final javax.crypto.ExemptionMechanism getExemptionMechanism();
//      private void checkCryptoPerm(javax.crypto.CipherSpi, java.security.Key) throws java.security.InvalidKeyException;
//      private void checkCryptoPerm(javax.crypto.CipherSpi, java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;
//      private void checkCryptoPerm(javax.crypto.CipherSpi, java.security.Key, java.security.AlgorithmParameters) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;
//      private boolean passCryptoPermCheck(javax.crypto.CipherSpi, java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException;
//      private static void checkOpmode(int);
//      private static java.lang.String getOpmodeString(int);
    //@ public behavior
    //@   assignable this.content;
    //@   ensures isInitialized;
    //@   signals_only java.security.InvalidKeyException;
    public final void init(int n, java.security.Key key) throws java.security.InvalidKeyException;
    //@ public behavior
    //@   assignable this.content;
    //@   ensures isInitialized;
    //@   signals_only java.security.InvalidKeyException;
    public final void init(int n, java.security.Key key, java.security.SecureRandom randome) throws java.security.InvalidKeyException;
    //@ public behavior
    //@   assignable this.content;
    //@   ensures isInitialized;
    //@   signals_only java.security.InvalidKeyException;
    public final void init(int n, java.security.Key key, java.security.spec.AlgorithmParameterSpec spec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;
    //@ public behavior
    //@   assignable this.content;
    //@   ensures isInitialized;
    //@   signals_only java.security.InvalidKeyException;
    public final void init(int n, java.security.Key key, java.security.spec.AlgorithmParameterSpec spec, java.security.SecureRandom random) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;
    //@ public behavior
    //@   assignable this.content;
    //@   ensures isInitialized;
    //@   signals_only java.security.InvalidKeyException;
    public final void init(int n, java.security.Key key, java.security.AlgorithmParameters params) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;
    //@ public behavior
    //@   assignable this.content;
    //@   ensures isInitialized;
    //@   signals_only java.security.InvalidKeyException;
    public final void init(int n, java.security.Key key, java.security.AlgorithmParameters params, java.security.SecureRandom random) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;
    //@ public behavior
    //@   assignable this.content;
    //@   ensures isInitialized;
    //@   signals_only java.security.InvalidKeyException;
    public final void init(int n, java.security.cert.Certificate certificate) throws java.security.InvalidKeyException;
    //@ public behavior
    //@   assignable this.content;
    //@   ensures isInitialized;
    //@   signals_only java.security.InvalidKeyException;
    public final void init(int n, java.security.cert.Certificate certificate, java.security.SecureRandom randome) throws java.security.InvalidKeyException;

    //      private void checkCipherState();
    
    //@ public normal_behavior
    //@   requires isInitialized;
    //@   ensures buf.length > 0 ==> \fresh(\result);
    //@   ensures buf.length == 0 ==> \result == null;
    //@ also public exceptional_behavior
    //@   requires !isInitialized;
    //@   signals_only IllegalStateException;
    //@ pure nullable
    public final byte[] update(byte[] buf);

    //@ public normal_behavior
    //@   requires isInitialized;
    //@   requires inputLen >= 0;
    //@   requires inputOffset >= 0 && inputOffset <= buf.length - inputLen;
    //@   ensures inputLen > 0 ==> \fresh(\result);
    //@   ensures inputLen == 0 ==> \result == null;
    //@ also public exceptional_behavior
    //@   requires !isInitialized;
    //@   assignable \nothing;
    //@   signals_only IllegalStateException;
    //@ also public exceptional_behavior
    //@   requires !isInitialized;
    //@   requires inputLen < 0 || !(inputOffset >= 0 && inputOffset <= buf.length - inputLen);
    //@   signals_only ShortBufferException;
    //@ pure nullable
    public final byte[] update(byte[] buf, int inputOffset, int inputLen);

    //@ public normal_behavior
    //@   requires isInitialized;
    //@   requires inputLen >= 0;
    //@   requires inputOffset >= 0 && inputOffset <= buf.length - inputLen;
    //@   assignable this.content,output[0 .. inputLen-1];
    //@ also public exceptional_behavior
    //@   requires !isInitialized;
    //@   assignable \nothing;
    //@   signals_only IllegalStateException;
    //@ also public exceptional_behavior
    //@   requires !isInitialized;
    //@   requires !(inputLen >= 0) || !(inputOffset >= 0 && inputOffset <= buf.length - inputLen) ;
    //@   assignable \nothing;
    //@   signals_only ShortBufferException;
    public final int update(byte[] buf, int inputOffset, int inputLen, byte[] output) throws javax.crypto.ShortBufferException;

    //@ public normal_behavior
    //@   requires isInitialized;
    //@   requires inputLen >= 0;
    //@   requires inputOffset >= 0 && inputOffset <= buf.length - inputLen;
    //@   requires outputOffset >= 0 && outputOffset <= output.length - inputLen;
    //@   assignable this.content,output[outputOffset .. outputOffset+inputLen-1];
    //@ also public exceptional_behavior
    //@   requires !isInitialized;
    //@   assignable \nothing;
    //@   signals_only IllegalStateException;
    //@ also public exceptional_behavior
    //@   requires !isInitialized;
    //@   requires !(inputLen >= 0) || !(inputOffset >= 0 && inputOffset <= buf.length - inputLen) && !(outputOffset >= 0 && outputOffset <= output.length - outputOffset);
    //@   assignable \nothing;
    //@   signals_only ShortBufferException;
    public final int update(byte[] buf, int inputOffset, int inputLen, byte[] output, int outputOffset) throws javax.crypto.ShortBufferException;

    //@ public normal_behavior
    //@   requires isInitialized;
    //@   assignable this.content,output.*;
    public final int update(java.nio.ByteBuffer input, java.nio.ByteBuffer output) throws javax.crypto.ShortBufferException;

    //      public final byte[] doFinal() throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;
    //      public final int doFinal(byte[], int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException, javax.crypto.BadPaddingException;


    //@ public normal_behavior
    //@   assignable this.content;
    //@   ensures \fresh(\result);
    //@   ensures \result.length == b.length; // FIXME - is this so? perhaps just when there have been no prvious calls?
    //@   ensures (* FIXME OPENJML - length of output? is it really fresh? *);
    public final byte[] doFinal(byte[] b) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;

    //      public final byte[] doFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;
    //      public final int doFinal(byte[], int, int, byte[]) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;
    //@ public normal_behavior
    //@   assignable this.content,output[*];
    public final int doFinal(byte[] buf, int inputOffset, int inputLen, byte[] output, int outputOffset) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;
    //      public final int doFinal(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;
    //      public final byte[] wrap(java.security.Key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException;
    //      public final java.security.Key unwrap(byte[], java.lang.String, int) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException;
    //      private java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec(java.security.AlgorithmParameters) throws java.security.spec.InvalidParameterSpecException;
    //      private static javax.crypto.CryptoPermission getConfiguredPermission(java.lang.String) throws java.lang.NullPointerException, java.security.NoSuchAlgorithmException;
    //      public static final int getMaxAllowedKeyLength(java.lang.String) throws java.security.NoSuchAlgorithmException;
    //      public static final java.security.spec.AlgorithmParameterSpec getMaxAllowedParameterSpec(java.lang.String) throws java.security.NoSuchAlgorithmException;
    //@ public normal_behavior
    //@   assignable this.content;
    public final void updateAAD(byte[] buf);
    //@ public normal_behavior
    //@   assignable this.content;
    public final void updateAAD(byte[] buf, int i, int j);
    //@ public normal_behavior
    //@   assignable this.content;
    public final void updateAAD(java.nio.ByteBuffer buffer);
      
}
