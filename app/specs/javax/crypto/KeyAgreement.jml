package javax.crypto;

//@ non_null_by_default
public class KeyAgreement {
    
      private static final boolean skipDebug;
      private java.security.Provider provider;
      private KeyAgreementSpi spi;
      private final java.lang.String algorithm;
      private java.security.Provider.Service firstService;
      private java.util.Iterator<java.security.Provider.Service> serviceIterator;
      private final java.lang.Object lock;
      private static int warnCount;
      private static final int I_NO_PARAMS;
      private static final int I_PARAMS;
      
      protected KeyAgreement(KeyAgreementSpi spi, java.security.Provider provider, java.lang.String s);
      private KeyAgreement(java.security.Provider.Service service, java.util.Iterator<java.security.Provider.Service> iterator, java.lang.String s);
      public final java.lang.String getAlgorithm();
      
      //@ public normal_behavior
      //@ model public static final pure heap_free boolean validAlgorithm(java.lang.String algorithm);

      //@ public normal_behavior
      //@   requires validAlgorithm(s);
      //@   ensures \fresh(\result);
      //@ also public exceptional_behavior
      //@   requires !validAlgorithm(s);
      //@   signals_only java.security.NoSuchAlgorithmException;
      //@ pure
      public static final KeyAgreement getInstance(java.lang.String s) throws java.security.NoSuchAlgorithmException;
      public static final KeyAgreement getInstance(java.lang.String s, java.lang.String ss) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
      public static final KeyAgreement getInstance(java.lang.String s, java.security.Provider provider) throws java.security.NoSuchAlgorithmException;
      void chooseFirstProvider();
      private void implInit(KeyAgreementSpi sp, int n, java.security.Key key, java.security.spec.AlgorithmParameterSpec spec, java.security.SecureRandom random) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;
      private void chooseProvider(int n, java.security.Key key, java.security.spec.AlgorithmParameterSpec spec, java.security.SecureRandom random) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;
      public final java.security.Provider getProvider();

      //@ public normal_behavior
      //@   assignable this.*;
      //@   ensures true; // FIXME - ignoring exception
      public final void init(java.security.Key key) throws java.security.InvalidKeyException;

      //@ public behavior
      //@   assignable this.*;
      //@   ensures true; // FIXME - fresh?
      public final void init(java.security.Key key, java.security.SecureRandom random) throws java.security.InvalidKeyException;

      //@ public behavior
      //@   assignable this.*;
      //@   ensures true; // FIXME - fresh?
      public final void init(java.security.Key key, java.security.spec.AlgorithmParameterSpec spec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;

      //@ public behavior
      //@   assignable this.*;
      //@   ensures true;
      public final void init(java.security.Key key, java.security.spec.AlgorithmParameterSpec spec, java.security.SecureRandom random) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;

      //@ public normal_behavior
      //@   assignable this.*;
      //@   ensures \fresh(\result); // FIXME - ignoring exception
      public final java.security.Key doPhase(java.security.Key key, boolean b) throws java.security.InvalidKeyException, java.lang.IllegalStateException;
      
      //@ model public byte[] _secret;
      //@ public invariant _secret.length <= Integer.MAX_VALUE/2;
      
      //@ public normal_behavior
      //@   ensures \fresh(\result);
      //@   ensures \result.length == _secret.length; // FIXME - ignoring exception
      //@ pure
      public final byte[] generateSecret() throws java.lang.IllegalStateException;
      public final int generateSecret(byte[] bytes, int n) throws java.lang.IllegalStateException, ShortBufferException;
      public final SecretKey generateSecret(java.lang.String s) throws java.lang.IllegalStateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException;

}
