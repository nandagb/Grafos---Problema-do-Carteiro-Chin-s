package javax.crypto;

//@ model import java.util.Arrays;

// FIXME _ this all needs review, as I don't know anything about MAC algorithms or their implementation
//@ non_null_by_default
public class Mac implements Cloneable {

    //@ public model JMLDataGroup macContent;
    
    //@ model public final static int MINSIZE = 16; // Minimum Mac size across all algorithms
    //@ model public final static int SIZE = 32; // TODO: Actually only true for specific algorithms
    
//      private static final sun.security.util.Debug debug;
//      private static final sun.security.util.Debug pdebug;
//      private static final boolean skipDebug;
//      //@ spec_public
//      private java.security.Provider provider;
//      private MacSpi spi;
      
      //@ spec_public
      private final java.lang.String algorithm;
      
      //@ spec_public
      private boolean initialized; //@ in macContent;
      
      //@ model public boolean isReset; //@ in macContent;
      
      //@ model nullable public byte[] savedInfo; //@ in macContent;
      //@ model public byte[] currentHash; //@ in macContent;
      //@ public invariant currentHash.length >= MINSIZE;
      
      //@ public normal_behavior
      //@   requires len >= 0;
      //@   requires 0 <= offa <= a.length - len;
      //@   requires 0 <= offb <= b.length - len;
      //@   ensures \result == (\forall int i; offa <= i < offa+len; a[i] == b[i-offa+offb]);
      //@ pure helper
      /*@ model public static boolean equalArrays(byte[] a, \bigint offa, byte[] b, \bigint offb, \bigint len) {
          return (\forall int i; offa <= i < offa+len; a[i] == b[i-offa+offb]);
       }
       */

      //@ public normal_behavior
      //@   requires len > 0;
      //@   ensures \result.length == len;
      //@ pure helper heap_free non_null
      //@ model public static byte[] hmacHash(byte[] input, int len); 

      //@ public normal_behavior
      //@   requires n >= 1;
      //@   ensures \result.length == SIZE;
      //@ pure helper heap_free non_null
      //@ model public static byte[] hmacIteratedHash(byte[] info, int n);
      
      //@ model public static final int MAXBL = 255;
      
      // Returns the concatenation of n blocks (each of length SIZE) of repeated iteration of
      // the hash acting on the 'info' material, according to https://tools.ietf.org/html/rfc5869
      //@ public normal_behavior
      //@   ensures \result.length == MAXBL*SIZE;
      //@   ensures (\forall int i; 1 <= i <= MAXBL; Mac.equalArrays(\result, (i-1)*SIZE, hmacIteratedHash(info,i), 0, SIZE));
      //@   ensures (\forall int k; 0 <= k < MAXBL*SIZE; \result[k] == hmacIteratedHash(info,1+k/SIZE)[k-(k/SIZE)*SIZE]);
      //@ pure helper heap_free
      //@ model public static byte[] concatenatedIteratedHash(byte[] info);
      
//      private java.security.Provider.Service firstService;
//      private java.util.Iterator<java.security.Provider.Service> serviceIterator;
//      private final java.lang.Object lock;
//      private static int warnCount;
      
      //@ protected normal_behavior
      //@   ensures this.initialized == false;
      //@   ensures this.algorithm == algorithm;
      //@ pure
      protected Mac(MacSpi spi, java.security.Provider provider, java.lang.String algorithm);

      //@ private normal_behavior
      //@   ensures initialized == false;
      //@   ensures this.algorithm == algorithm;
      //@ pure
      private Mac(java.security.Provider.Service service, java.util.Iterator<java.security.Provider.Service> iter, java.lang.String algorithm);

      
      //@ public normal_behavior
      //@   ensures \result == this.algorithm;
      //@ pure helper
      public final java.lang.String getAlgorithm();

      //@ public normal_behavior
      //@ model public static pure heap_free boolean validAlgorithm(String algorithm);
      
      //@ public normal_behavior
      //@   requires validAlgorithm(algorithm);
      //@   ensures \fresh(\result);
      //@   ensures \result.algorithm == algorithm;
      //@ also public exceptional_behavior
      //@   requires !validAlgorithm(algorithm);
      //@   signals_only java.security.NoSuchAlgorithmException;
      //@ pure
      public static final Mac getInstance(java.lang.String algorithm) throws java.security.NoSuchAlgorithmException;

      //@ public normal_behavior
      //@   requires validAlgorithm(algorithm);
      //@   ensures \fresh(\result);
      //@   ensures \result.algorithm == algorithm;
      //@ also public exceptional_behavior
      //@   requires !validAlgorithm(algorithm);
      //@   signals_only java.security.NoSuchAlgorithmException;
      //@ pure helper
      public static final Mac getInstance(java.lang.String algorithm, java.lang.String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;

      //@ public normal_behavior
      //@   requires validAlgorithm(algorithm);
      //@   ensures \fresh(\result);
      //@   ensures \result.algorithm == algorithm;
      //@ also public exceptional_behavior
      //@   requires !validAlgorithm(algorithm);
      //@   signals_only java.security.NoSuchAlgorithmException;
      //@ pure helper
      public static final Mac getInstance(java.lang.String algorithm, java.security.Provider provider) throws java.security.NoSuchAlgorithmException;

      void chooseFirstProvider();
      private void chooseProvider(java.security.Key key, java.security.spec.AlgorithmParameterSpec spec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;
      public final java.security.Provider getProvider();
      
      
      //@ public normal_behavior
      //@   ensures \result == SIZE;
      //@ pure helper // TODO: Length depends on algorithm
      public final int getMacLength();

      //@ public normal_behavior
      //@   assignable this.*;
      //@   ensures this.initialized == true;
      //@   ensures this.isReset == true;
      //@   ensures this.savedInfo == null;
      //@// TODO: Model InvalidKeyException
      public final void init(java.security.Key key) throws java.security.InvalidKeyException;

      //@ public normal_behavior
      //@   assignable this.*;
      //@   ensures this.initialized == true;
      //@   ensures this.isReset == true;
      //@   ensures this.savedInfo == null;
      //@// TODO: Model InvalidKeyException
      public final void init(java.security.Key key, java.security.spec.AlgorithmParameterSpec spec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;

      //@ public normal_behavior
      //@   requires this.initialized;
      //@   assignable this.currentHash, this.isReset;
      //@   ensures this.isReset == false;
      public final void update(byte b) throws java.lang.IllegalStateException;

      //@ public normal_behavior
      //@   { update(buf, 0, (int)buf.length); }
      public final void update(byte[] buf) throws java.lang.IllegalStateException;

      //@ public normal_behavior
      //@   requires len == 0;
      //@   assignable \nothing;
      //-H3@ also public normal_behavior
      //-H3@   requires len > 0;
      //-H3@   requires 0 <= offset <= buf.length - len;
      //-H3@   requires this.initialized;
      //-H3@   requires this.savedInfo == null;
      //-H3@   assignable this.currentHash, this.isReset;
      //-H3@   ensures !this.isReset;
      //-H3@   ensures this.currentHash == hmacHash(buf, SIZE);
      //-H1@ also public normal_behavior
      //-H1@   requires offset >= 0 && len > 0 && offset <= buf.length - len;
      //-H1@   requires this.initialized;
      //-H1@   requires buf[offset+len-1] == 1;
      //-H1@   requires this.savedInfo != null && this.savedInfo.length == len - 1;
      //-H1@   requires (\forall int k; k>=0 && k<len-1; this.savedInfo[k] == buf[offset+k]);
      //-H1   @   requires Mac.equalArrays(this.savedInfo,0,buf,offset,len-1);
      //-H1@   assignable this.currentHash, this.isReset;
      //-H1@   ensures !this.isReset;
      //-H1@   ensures this.currentHash == hmacIteratedHash(this.savedInfo,(byte)1);
      //-H2@ also public normal_behavior
      //-H2@   requires len > 0;
      //-H2@   requires 0 <= offset <= buf.length - len;
      //-H2@   requires this.initialized;
      //-H2@   requires this.savedInfo != null && this.savedInfo.length == len - 1 - SIZE;
      //-H2@   old int n = Byte.toUnsignedInt(buf[offset+len-1]);
      //-H2@   requires n > 1;
      //-H2@   requires Mac.equalArrays(buf,offset,hmacIteratedHash(this.savedInfo,n-1),0,SIZE);
      //-H2@   requires Mac.equalArrays(this.savedInfo, 0, buf, offset+SIZE, (int)this.savedInfo.length);
      //-H2@   assignable this.currentHash, this.isReset;
      //-H2@   ensures !this.isReset;
      //-H2@   ensures this.currentHash == hmacIteratedHash(this.savedInfo,n);
      
      public final void update(byte[] buf, int offset, int len) throws java.lang.IllegalStateException;

      //@ public normal_behavior
      //@   requires this.initialized;
      //@   assignable this.currentHash, this.isReset;
      //@   ensures !this.isReset;
      public final void update(java.nio.ByteBuffer buffer);
      
      //@ public normal_behavior
      //@   requires this.initialized;
      //@   assignable this.isReset;
      //@   ensures \fresh(\result);
      //@   ensures this.isReset;
      //@   ensures \result.length >= MINSIZE;
      //@   ensures \result.length == this.currentHash.length;
      //@   ensures Mac.equalArrays(\result,0,this.currentHash,0,(int)\result.length);
      public final byte[] doFinal() throws java.lang.IllegalStateException;

      //@ public normal_behavior
      //@   requires !isReset;
      //@   requires outOffset >= 0 && outOffset + SIZE <= out.length;
      //@   assignable this.isReset, out[outOffset .. outOffset + SIZE -1];
      //@   ensures this.isReset;
      //@   ensures Mac.equalArrays(out,outOffset,currentHash,0,SIZE);
      public final void doFinal(byte[] out, int outOffset) throws ShortBufferException, java.lang.IllegalStateException;

      //@ public normal_behavior
      //@   { update(input,0,(int)input.length); return doFinal(); }
      public final byte[] doFinal(byte[] input) throws java.lang.IllegalStateException;

      //@ public normal_behavior
      //@   requires this.initialized;
      //@   assignable this.isReset, this.savedInfo;
      //@   ensures this.isReset;
      //@   ensures this.savedInfo == null;
      public final void reset();

      //@ also public normal_behavior
      //@   ensures true;  // TODO: Javadoc is not clear on what part of state is copied
      //@ pure
      public final java.lang.Object clone() throws java.lang.CloneNotSupportedException;

}
