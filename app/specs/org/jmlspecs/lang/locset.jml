package org.jmlspecs.lang;

//@ immutable pure
public class locset implements IJmlPrimitiveType {
/*@    
    public normal_behavior
      ensures \result >= 0;
    model public \bigint size();
    
    public normal_behavior
       requires true;
    model public boolean contains(location x);

    public normal_behavior
      ensures \result == (this.size() == 0);
    pure
    model public boolean empty();
    
    public normal_behavior
      ensures \result.size() == 0;
      ensures (\forall location x; ; !\result.contains(x));
    model static public locset locset();
    
    public normal_behavior
      ensures \result.size() == 1;
      ensures \result.contains(t);
      ensures (\forall location x; ; x != t ==> !\result.contains(x));
    model static public locset locset(location t);
    
    public normal_behavior
       ensures \result == (\forall location t;; s.contains(t) == ss.contains(t));
    model public static boolean equals(locset s, locset ss);
    
    public normal_behavior
       ensures \result == (this == s || equals(this,s));
    model public boolean equals(locset s);
    
    public normal_behavior // Specs are more successful when written without spec cases
      ensures this.contains(x) ==> \result == this;
      ensures !this.contains(x) ==> \result.size() == this.size() + 1;
      ensures \result.contains(x);
      ensures (\forall location t; t != x; \result.contains(t) == this.contains(t));
    model public locset add(location x);
    
    public normal_behavior
      ensures !this.contains(x) ==> \result == this;
      ensures this.contains(x) ==> \result.size() == this.size() - 1;
      ensures !\result.contains(x);
      ensures (\forall location t; t != x; \result.contains(t) == this.contains(t));
    model public locset remove(location x);
    
@*/
}
