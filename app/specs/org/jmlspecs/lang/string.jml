package org.jmlspecs.lang;

//@ immutable pure non_null_by_default
public final class string implements IJmlPrimitiveType, IJmlIntArrayLike {

    //+RAC@ ghost public String racValue;
    
    //@ model public \bigint length;

    //@ public invariant 0 <= length;
    //+RAC@ public represents length = racValue.length();
    
    //@ public normal_behavior
    //@     ensures \result.length == s.length();
    //-RAC@ ensures (\forall \bigint i; 0 <= i < \result.length; \result[i] == s.charAt((int)i));
    static public string string(String s);
  
    //@ public normal_behavior
    //@   ensures \result.length == 0;
    static public string empty();

    //@ public normal_behavior
    //@   ensures \result == (this.length == 0);
    public boolean isEmpty();
  
/*-RAC@   
    //-RAC@ public normal_behavior
    //-RAC@   ensures \result == length;
    //-RAC@ model heap_free public \bigint size();
    
    //@ public normal_behavior
    //@   ensures \result == this[i];
    //@ model heap_free public char get(\bigint i);

    //@ public normal_behavior
    //@     ensures \result.length == this.length;
    //@     ensures \result[i] == c;
    //-RAC@ ensures \forall \bigint j; j != i; \result[j] == this[j];
    //@     ensures this[i] == c ==> \result == this;
    //@ model heap_free public string put(\bigint i, char c) { return string(""); }

    public normal_behavior
       //-RAC@ ensures \result == (s.length == ss.length && (\forall \bigint i;; (0 <= i < s.length) ==> (s[i] == ss[i]) ));
    model heap_free public static boolean equals(string s, string ss) {
        return (s.length == ss.length); // FIXME
    }
    
    public normal_behavior
       ensures \result == (this == s || equals(this,s));
    model heap_free public boolean equals(string s);
    
    public normal_behavior
      requires 0 <= j <= this.length;
      ensures \result.length == this.length + 1;
      //-RAC@ ensures (\forall \bigint i;; (0 <= i < j) ==> (\result[i] == this[i]));
      //-RAC@ ensures (\forall \bigint i;; (j+1 <= i < \result.length) ==> (\result[i] == this[i-1]));
      ensures \result[j] == v;
    model heap_free public string add(\bigint j, char v) {
      return string(""); // FIXME
    }

    public normal_behavior
      ensures \result == add(length,v);
      ensures \result.length == this.length + 1;
      //-RAC@ ensures (\forall \bigint i;; (0 <= i < this.length) ==> (\result[i] == this[i]));
      ensures \result[this.length] == v;
    model heap_free public string add(char v) {
      return add(length, v);
    }

    public normal_behavior
      ensures \result.length == this.length + s.length;
      ensures (\forall \bigint i;; (0 <= i < this.length) ==> (\result[i] == this[i]));
      ensures (\forall \bigint i;; (0 <= i < s.length) ==> (\result[i+this.length] == this[i-1]));
    model heap_free public string append(string s);

    public normal_behavior
      requires 0 <= j < this.length;
      ensures \result.length == this.length - 1;
      ensures (\forall \bigint i;; (0 <= i < j) ==> (\result[i] == this[i]));
      ensures (\forall \bigint i;; (j <= i < \result.length) ==> (\result[i] == this[i+1]));
    model heap_free public string remove(\bigint j);
    
    public normal_behavior
      requires 0 <= start <= this.length && 0 <= length <= this.length - start;
      ensures \result.length == length;
      ensures (\forall \bigint i;; (0 <= i && i < \result.length) ==> \result[i] == this[i+start]);
    model heap_free public string substring(\bigint start, \bigint length);
  
@*/
}
