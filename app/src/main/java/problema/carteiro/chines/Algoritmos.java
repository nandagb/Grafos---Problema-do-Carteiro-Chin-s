/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package problema.carteiro.chines;


import java.util.ArrayList;
import java.util.List;

public class Algoritmos {
    /**
     * Função que checa se o grafo é conexo.
     * @param grafo Grafo para ser verificado
     * @param ver Vertice sendo verificado no momento
     * @param visitados Lista de vértices já visitados
     */
    public void checarGrafoConexo(Grafo grafo, Vertice ver, List<Vertice> visitados){
        for (Vertice v: grafo.getListaAdjacencia().get(ver)) {
            if (!visitados.contains(v))
            {
                visitados.add(v);
                checarGrafoConexo(grafo, v, visitados);
            }
        }
    }

    /**
     * Função que checa se o grafo é Euleriano.
     * Para isto se utiliza do teorema 2.1 do livro Teoria Computacional de Grafos do autor Jayme Luiz Szwarcfiter.
     * @param grafo grafo para ser verificado
     * @return true caso seja Euleriano, false CC
     */
    public boolean checarGrafoEuleriano(Grafo grafo){
        boolean conexo = false;
        boolean euleriano = false;
        boolean grauPar = true;

        List<Vertice> visitados = new ArrayList<>();

        // Verificar se é conexo
        Vertice ver = grafo.getListaAdjacencia().keySet().stream().findFirst().get();
        visitados.add(ver);
        checarGrafoConexo(grafo, ver, visitados);
        if (visitados.size() == grafo.getV())
            conexo = true;

        System.out.println("Conexo: " + conexo);

        // Se conexo, verificar se todo nó tem grau par
        if (conexo){
            for (Vertice v: grafo.getListaAdjacencia().keySet()) {
                if (grafo.getListaAdjacencia().get(v).size() % 2 != 0)
                {
                    grauPar = false;
                }
            }
        }
        System.out.println("Grau Par: " + grauPar);

        if (conexo && grauPar)
            euleriano = true;

        System.out.println("Euleriano: " + euleriano);

        return euleriano;
    }

    /**
     * Algoritmo de Hierholzer.
     * Implementado assim como descrito no relatório.
     * @param grafo Grafo que gerará a trilha euleriana
     * @param ver Vértice atual sendo adicionado à trilha
     * @param trilhaEuleriana Lista que possui a trilha
     */
    public void hierholzer(Grafo grafo, Vertice ver, List<Vertice> trilhaEuleriana){
        for (int i = 0; i < grafo.getListaAdjacencia().get(ver).size(); i++)
        {
            Vertice v = grafo.getListaAdjacencia().get(ver).get(i);
            grafo.remAresta(ver.getN(), v.getN());
            hierholzer(grafo, v, trilhaEuleriana);
        }
        trilhaEuleriana.add(ver);
    }

    public boolean algoritmoLinks(Grafo grafo) {
        boolean linkado = false;
        boolean euleriano = false;
        grafo.printGrafo();
        euleriano = checarGrafoEuleriano(grafo);

        if (euleriano){
            List<Vertice> trilhaEuleriana = new ArrayList<>();
            Vertice ver = grafo.getListaAdjacencia().keySet().stream().findFirst().get();
            hierholzer(grafo, ver, trilhaEuleriana);

            System.out.print("Trilha euleriana: ");
            for (Vertice v : trilhaEuleriana){
                System.out.print(v.getN() + " ");
            }

            linkado = true;

            return linkado;
        }

        return euleriano;
    }

    /***
     * Retorna o conjunto de vértices com grau ímpar
     * @param grafo a ser analisado
     * @return Lista com os vértices de grau ímpar
     */
    public void numGrauImpar(Grafo grafo){
        for(Vertice ver: grafo.getListaAdjacencia().keySet()){
            if(grafo.getListaAdjacencia().get(ver).size() % 2 != 0 ){
                System.out.println("o vértice : " + ver.getN() + " tem grau ímpar");
            }
        }
    }

    //retorna o vértice com menor distância em uma lista de vértices
    public Vertice menorD(ArrayList<Vertice> lista){
        Vertice m = new Vertice(lista.get(0));

        for(int i = 0; i < lista.size(); i++){
            if(lista.get(i).getD() < m.getD()){
                m = lista.get(i);
            }
        }

        return m;
    }

    public void dijkstra(Grafo grafo, Vertice fonte){

        ArrayList<Vertice> F = new ArrayList<>();//grupo dos vértices fechados
        ArrayList<Vertice> A = new ArrayList<>();//grupo dos vértices abertos

        F.add(fonte);

        for(Vertice ver: grafo.getListaAdjacencia().keySet()){
            if( ver.getN() != fonte.getN() ){
                A.add(ver);
            }
        }

        
        System.out.println("F inicial: ");
        for (Vertice f : F){
            System.out.println(f.getN());
        }

        System.out.println("A inicial: ");
        for (Vertice a : A){
            System.out.println(a.getN());
        }
        

        //System.out.println("grafo dentro de dijkstra:");
        //grafo.printVertices();
        
        fonte.setD(0);
        fonte.setRot(Double.POSITIVE_INFINITY);

        for(Vertice ver: grafo.getListaAdjacencia().keySet()){//percorre o grafo
            if( grafo.getListaAdjacencia().get(ver) != fonte ){//se não for a fonte
                //rotulação inicial
                if( grafo.getListaAdjacencia().get(fonte).contains(ver) ){//se o vertice estiver a distancia de 1 da fonte
                    ver.setRot(fonte.getN());//o rotulo dos vértices adjacentes a fonte é a própria fonte
                    ver.setD(1);//distancia da fonte é 1
                }
                else{
                    ver.setRot(0);//não definimos um rótulo
                    ver.setD(Double.POSITIVE_INFINITY);//não definimos uma distância
                }
            }
        }

        System.out.println("grafo depois da rotulacao inicial:");
        grafo.printVertices();
        System.out.println();

        Vertice i;
        int j = 1;
        Vertice ver;
        while(A.size() != 0){
            i = new Vertice(menorD(A));//recebe o vértice com menor distância entre os vértices abertos
        
                ver = grafo.getN(j);
                System.out.println("vertice: " +  ver.getN());
                for (Vertice adjver: grafo.getListaAdjacencia().get(ver)) {//para todos os adjacentes de i
                    if(A.contains(adjver)){//que estiverem abertos
                        //System.out.println("adjacente aberto: " + adjver.getN());
                        //System.out.println("adjacente d: " + adjver.getD());
                        //System.out.println("ver d: " + ver.getD() + 1);
                        //System.out.println("valor da expressao: " + ( adjver.getD() > ver.getD() + 1 ));
                        if(grafo.getN(adjver.getN()).getD() > ver.getD() + 1){
                            grafo.getN(adjver.getN()).setD(ver.getD() + 1);
                            grafo.getN(adjver.getN()).setRot(ver.getN());
                        }
                        System.out.println("dentro do for de dentro:");
                        grafo.printVertices();
                        System.out.println();
                    }
                }
                
        

            //fecha o vértice
            A.remove(i);
            F.add(i);
            j++;

            System.out.println("F: ");
            for (Vertice f : F){
                System.out.println(f.getN());
            }
    
            System.out.println("A: ");
            for (Vertice a : A){
                System.out.println(a.getN());
            }


        }
    }

    
}
